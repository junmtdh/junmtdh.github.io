<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.java概述</title>
    <url>/2022/05/16/1-java-gai-shu/</url>
    <content><![CDATA[<table><tr><td bgcolor="yellow"><font size="5">笔记标注注释</font></td></tr></table>

<blockquote>
<ul>
<li><strong>单独重点知识加粗了</strong></li>
<li><u>单独需要背诵的加了下划线</u></li>
<li>⭐️重点</li>
<li>⭐️⭐️重点的重点</li>
</ul>
</blockquote>
<h1 id="1-java概述"><a href="#1-java概述" class="headerlink" title="1 java概述"></a>1 java概述</h1><h2 id="1-1转义字符"><a href="#1-1转义字符" class="headerlink" title="1.1转义字符"></a>1.1转义字符</h2><ul>
<li>\t  一个制表位，实现对齐功能</li>
<li>\n  换行</li>
<li>\\  一个\</li>
<li>\“  一个” </li>
<li>\r  回车</li>
</ul>
<h2 id="1-2注释"><a href="#1-2注释" class="headerlink" title="1.2注释"></a>1.2注释</h2><ul>
<li><p>单行注释:  //注释文字</p>
</li>
<li><p>多行注释:  /*注释文字*/</p>
</li>
<li><p>文档注释:  </p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**
* @author
* @version
*/</span></code></pre></li>
</ul>
<h2 id="1-3代码规范⭐️"><a href="#1-3代码规范⭐️" class="headerlink" title="1.3代码规范⭐️"></a>1.3代码规范⭐️</h2><ul>
<li>类、方法的注释，要以 javadoc 的方式来写</li>
<li>注释详细，着重告述读者为什么这样写，如何修改，注意什么问题等</li>
<li>使用tab、shift + tab</li>
<li>运算符和 = 两边习惯性各加一个空格</li>
<li>源文件使用utf-8编码</li>
<li>行宽度不要超过80字符</li>
<li>代码编写次行风格和行尾风格</li>
</ul>
<h2 id="1-4-JDK-JRE⭐️"><a href="#1-4-JDK-JRE⭐️" class="headerlink" title="1.4  JDK  JRE⭐️"></a>1.4  JDK  JRE⭐️</h2><table><tr><td bgcolor="yellow"><font size="5">详细可见另一篇文章<a href="https://junmtdh.fhawk.cn/2021/05/27/java-yun-xing-ji-zhi/">java运行机制</a></font></td></tr></table>

<ul>
<li>JDK(java开发工具包)</li>
<li>JDK = JRE + java开发工具</li>
<li>JRE = JVM + Java的核心类库</li>
<li>JVM(java虚拟机)</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>10.异常</title>
    <url>/2022/06/29/10-yi-chang/</url>
    <content><![CDATA[<ul>
<li><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Java语言中，将程序执行中发生的不正常情况称为 “异常”</p>
</li>
<li><h4 id="执行中异常事件分类："><a href="#执行中异常事件分类：" class="headerlink" title="执行中异常事件分类："></a>执行中异常事件分类：</h4><ol>
<li>Error(错误)：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情況。比如：StackoverflowError[栈溢出]和OOM(out ofmemory)，Error 是严重错误，程序会崩溃</li>
<li>Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。，例如空指针访问，<br>试图读取不存在的文件，网络连接中断等等，Exception 分为两大类：运行时异常口和编译时异常口。</li>
</ol>
</li>
</ul>
<h2 id="10-1异常体系图⭐️"><a href="#10-1异常体系图⭐️" class="headerlink" title="10.1异常体系图⭐️"></a>10.1异常体系图⭐️</h2><ul>
<li><h4 id="异常体系图："><a href="#异常体系图：" class="headerlink" title="异常体系图："></a>异常体系图：</h4><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/10-1.jpg"></p>
</li>
<li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>异常分为两大类，运行时异常和编译时异常</li>
<li>运行时异常，编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常</li>
<li>运行时异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li>
<li>编译时异常，是编译器要求必须处置的异常</li>
</ol>
</li>
</ul>
<h2 id="10-2常见的异常"><a href="#10-2常见的异常" class="headerlink" title="10.2常见的异常"></a>10.2常见的异常</h2><ul>
<li><h4 id="运行时异常："><a href="#运行时异常：" class="headerlink" title="运行时异常："></a>运行时异常：</h4><ul>
<li><p>NullPointerException：空指针异常</p>
</li>
<li><p>ArithmeticException：数学运算异常</p>
</li>
<li><p>ArrayIndexOutOfBoundsException：数组下标越界异常</p>
</li>
<li><p>ClassCastException：类型转换异常</p>
</li>
<li><p>NumberFormatException：数字格式不正确异常</p>
</li>
</ul>
</li>
<li><h4 id="编译时异常："><a href="#编译时异常：" class="headerlink" title="编译时异常："></a>编译时异常：</h4><ul>
<li><p>SQLException：操作数据库时，查询表可能发生异常</p>
</li>
<li><p>lOException：操作文供时，发生的异常</p>
</li>
<li><p>FileNotFoundException：当操作一个不存在的文件时，发生异常</p>
</li>
<li><p>ClassNotFoundException：加载类，而该类不存在时异常</p>
</li>
<li><p>EOFException：操作文件，到文件末尾，发生异常</p>
</li>
<li><p>illegalArguementException：参数异常</p>
</li>
</ul>
</li>
</ul>
<h2 id="10-3异常处理⭐️"><a href="#10-3异常处理⭐️" class="headerlink" title="10.3异常处理⭐️"></a>10.3异常处理⭐️</h2><ul>
<li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>异常处理就是当异常发生时，对异常处理的方式</p>
</li>
</ul>
<h3 id="10-3-1-try-catch-finally"><a href="#10-3-1-try-catch-finally" class="headerlink" title="10.3.1  try-catch-finally"></a>10.3.1  try-catch-finally</h3><ul>
<li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>程序员在代码中捕获发生的异常，自行处理</p>
</li>
<li><h4 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h4></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/10-2.jpg"></p>
<ul>
<li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>如果异常发生了，则异常发生后面的代码不会执行，直接进入到catch块</li>
<li>如果异常没有发生，则顺序执行try的代码块，不会进入到catch块</li>
<li>如果希望不管是否发生异常，都执行某段代码(比如关闭连接，释放资源等)，则使用如下代码-finally{}</li>
<li>可以有多个catch语句，捕获不同的异常(进行不同的业务处理)，要求父类异常在后，子类异常在前，比如(Exception 在后，NullPointer Exception 在前)，如果发生异常，只会匹配一个catch</li>
<li>try-finally配合，相当于没有捕获异常，程序直接崩溃但执行finally</li>
</ol>
</li>
</ul>
<h3 id="10-3-2-throws"><a href="#10-3-2-throws" class="headerlink" title="10.3.2  throws"></a>10.3.2  throws</h3><ul>
<li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>将发生的异常抛出，交给调用者(方法)来处理，最顶级的处理者就是JVM，默认抛出运行异常</p>
</li>
<li><h4 id="流程图：-1"><a href="#流程图：-1" class="headerlink" title="流程图："></a>流程图：</h4></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/10-3.jpg"></p>
<ul>
<li><h4 id="注意事项和细节：-2"><a href="#注意事项和细节：-2" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>对于编译异常，程序中必须处理，比如try-catch 或者 throws</li>
<li>对于运行时异常，程序中如果没有处理，默认就是throws的方式处理</li>
<li>子类重写父类的方法时，对抛出异常的规定：子类重与的方法，所抛出的异常类型要么和父类抛出的异常一致，要么为父类拋出的异常的类型的子类型</li>
<li>在throws 过程中，如果有方法 try-catch，就相当于处理异常，就可以不必throws</li>
<li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</li>
</ol>
</li>
</ul>
<h2 id="10-4自定义异常"><a href="#10-4自定义异常" class="headerlink" title="10.4自定义异常"></a>10.4自定义异常</h2><ul>
<li><h4 id="基本介绍：-4"><a href="#基本介绍：-4" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>当程序中出现了某些 “错误〞，但该错误信息并没有在Throwable子类中描述处理，这时可以设计异常类，用于描达该错误信息</p>
</li>
<li><h4 id="自定义异常步骤："><a href="#自定义异常步骤：" class="headerlink" title="自定义异常步骤："></a>自定义异常步骤：</h4><ol>
<li>定义类：自定义异常类名(程序员自己写)继承Exception或Runtime Exception</li>
<li>如果继承Exception，属于编译异常</li>
<li>如果继承RuntimeException，属子运行异常(一般来说，继承RuntimeException)</li>
</ol>
</li>
</ul>
<h2 id="10-5-throw和throws"><a href="#10-5-throw和throws" class="headerlink" title="10.5  throw和throws"></a>10.5  throw和throws</h2><ul>
<li><h4 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h4></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/10-4.jpg"></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>2.java变量</title>
    <url>/2022/05/17/2-bian-liang/</url>
    <content><![CDATA[<h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><h2 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h2><h4 id="x1F9CA-基本介绍"><a href="#x1F9CA-基本介绍" class="headerlink" title="&#x1F9CA;基本介绍"></a>&#x1F9CA;基本介绍</h4><p>  变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房间，而通过变量名可以访问到变量(值)</p>
  <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> score <span class="token operator">=</span> <span class="token number">88.9</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> gender <span class="token operator">=</span> <span class="token char">'男'</span>；
<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span></code></pre>

<h4 id="x1F9CA-注意事项和细节："><a href="#x1F9CA-注意事项和细节：" class="headerlink" title="&#x1F9CA;注意事项和细节："></a>&#x1F9CA;注意事项和细节：</h4><p><mark style="background-color:#00BFFF">1. 变量表示内存中的一个存储区域[不同的变量，类型不同，占用的空间大小不同]<br><br>  2. 该区域有自己的名称[变量名]和类型[数据类型]<br><br>  3. 变量必须先声明，后使用，即有顺序 <br><br>  4. 该区域的数据可以在同一类型范围内不断变化 <br><br>  5. <strong>变量在同一个作用域内不能重名</strong> <br><br>  6. 变量=变量名＋值+数据类型<br>  </mark>   </p>
<h2 id="2-2-基本数据类型⭐️"><a href="#2-2-基本数据类型⭐️" class="headerlink" title="2.2 基本数据类型⭐️"></a>2.2 基本数据类型⭐️</h2><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/datatype.jpg">  </p>
<h3 id="2-2-1-数值型"><a href="#2-2-1-数值型" class="headerlink" title="2.2.1 数值型"></a>2.2.1 数值型</h3><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/bianliang.jpg"></p>
<h4 id="x1F9CA-整数类型-byte-1个字节-nbsp-nbsp-short-2个字节-nbsp-nbsp-int-4个字节-nbsp-nbsp-long-8个字节"><a href="#x1F9CA-整数类型-byte-1个字节-nbsp-nbsp-short-2个字节-nbsp-nbsp-int-4个字节-nbsp-nbsp-long-8个字节" class="headerlink" title="&#x1F9CA;整数类型  (byte[1个字节] &nbsp;&nbsp;short[2个字节] &nbsp;&nbsp; int[4个字节] &nbsp;&nbsp;long [8个字节])"></a>&#x1F9CA;整数类型  <mark>(byte[1个字节] &nbsp;&nbsp;short[2个字节] &nbsp;&nbsp; int[4个字节] &nbsp;&nbsp;long [8个字节])</mark></h4><ol>
<li>Java的整型常量(具体值)<strong>默认为 int 型</strong>，声明long型常量须后加‘l’或‘L’</li>
<li>java程序中变量常声明为int型，除非不足以表示大数，才使用long</li>
<li>bit: 计算机中的最小存储单位，byte:t算机中基本存储单元，1byte = 8 bit</li>
</ol>
<h4 id="x1F9CA-浮点-小数-类型-float-4个字节-nbsp-nbsp-double-8个字节"><a href="#x1F9CA-浮点-小数-类型-float-4个字节-nbsp-nbsp-double-8个字节" class="headerlink" title="&#x1F9CA;浮点(小数)类型 (float[4个字节] &nbsp;&nbsp; double[8个字节])"></a>&#x1F9CA;浮点(小数)类型 <mark>(float[4个字节] &nbsp;&nbsp; double[8个字节])</mark></h4><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/bianliang2.jpg">  </p>
<ol>
<li>浮点数=符号位+指数位+尾数位</li>
<li>尾部可能丢失，造成精度损失</li>
<li><mark style="background-color:#00BFFF">Java 的浮点型常量(具体值)默认为double型，声明float型常量，须后加’f’或’F’</mark></li>
<li>十进制数形式：5.12    512.0f    .512(必须有小数点)<br>科学计数法形式：5.12e2    5.12E-2 </li>
<li><strong>通常情况默认使用double</strong></li>
</ol>
<h4 id="x1F9CA-字符型-Char-2个字节"><a href="#x1F9CA-字符型-Char-2个字节" class="headerlink" title="&#x1F9CA;字符型(Char[2个字节])"></a>&#x1F9CA;字符型(Char[2个字节])</h4><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/char.jpg"></p>
<ol>
<li>使用单引号表示</li>
<li>Java中还允许使用转义字符来将其后的字符转变为特殊字符型常量<br>例如：char c3= ‘\n’;  //‘\n’表示换行符</li>
<li><mark style="background-color:#00BFFF">char的<strong>本质是一个整数</strong>，输出时是unicode码对应字符</mark></li>
<li>char类可以进行运算的，相当于一个整数，因为它都会对应有Unicode码.</li>
</ol>
<h4 id="x1F9CA-布尔型-boolean-1个字节"><a href="#x1F9CA-布尔型-boolean-1个字节" class="headerlink" title="&#x1F9CA;布尔型(boolean[1个字节])"></a>&#x1F9CA;布尔型(boolean[1个字节])</h4><ol>
<li>boolean类型数据只允许取值true和false，无null</li>
<li>boolean类型占1个字节</li>
<li><strong>不可以用0或非0的整数代替false和true，与C语言不同</strong></li>
</ol>
<h2 id="2-3-基本数据类型转化"><a href="#2-3-基本数据类型转化" class="headerlink" title="2.3 基本数据类型转化"></a>2.3 基本数据类型转化</h2><h3 id="2-3-1-自动类型转换"><a href="#2-3-1-自动类型转换" class="headerlink" title="2.3.1 自动类型转换"></a>2.3.1 自动类型转换</h3><h4 id="x1F31E-基本介绍："><a href="#x1F31E-基本介绍：" class="headerlink" title="&#x1F31E;基本介绍："></a>&#x1F31E;基本介绍：</h4><p>  java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型</p>
  <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">88</span></code></pre>

<h4 id="x1F31E-转换规则："><a href="#x1F31E-转换规则：" class="headerlink" title="&#x1F31E;转换规则："></a>&#x1F31E;转换规则：</h4><p>  <strong><u>char &lt; int &lt; long &lt; float &lt; double </u></strong></p>
<p>  <strong><u>byte &lt; short &lt; int &lt; long &lt; float &lt; double</u></strong></p>
<h4 id="x1F31E-注意事项和细节"><a href="#x1F31E-注意事项和细节" class="headerlink" title="&#x1F31E;注意事项和细节"></a>&#x1F31E;注意事项和细节</h4><ol>
<li><p><mark style="background-color:#00BFFF">有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，再进行计算</mark><br>  </p>
</li>
<li><p><mark style="background-color:#00BFFF">我们把精度(容量)大的数据类型赋值给精度(容量)小 的数据类型时，就会报错，反之就会进行自动类型转换。</mark>  </p>
</li>
<li><p><strong><table><tr><td bgcolor="yellow"><font size="5"> byte    short    char    之间不会相互转换 </font></td></tr></table></strong></p>
</li>
<li><p><strong><table><tr><td bgcolor="yellow"><font size="5">byte    short    char    计算是首先转换为int类型</font></td></tr></table></strong>  </p>
</li>
<li><p>boolean不参与转换  </p>
</li>
<li><p><mark style="background-color:#00BFFF">自动提升原则：表达式结果的类型自动提升为操作数中最大的类型</mark></p>
</li>
</ol>
<h3 id="2-3-2-强制类型转换"><a href="#2-3-2-强制类型转换" class="headerlink" title="2.3.2 强制类型转换"></a>2.3.2 强制类型转换</h3><h4 id="x1F31E-基本介绍：-1"><a href="#x1F31E-基本介绍：-1" class="headerlink" title="&#x1F31E;基本介绍："></a>&#x1F31E;基本介绍：</h4><p>  自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符()，但可能造成精度降低或溢出，格外要注意</p>
  <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">8.8</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h4 id="x1F31E-注意事项和细节-1"><a href="#x1F31E-注意事项和细节-1" class="headerlink" title="&#x1F31E;注意事项和细节"></a>&#x1F31E;注意事项和细节</h4><ol>
<li><p>当数据从精度  大——＞小，就需要使用到强制转换</p>
</li>
<li><p>强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span><span class="token operator">+</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">)</span></code></pre></li>
<li><p><mark style="background-color:#00BFFF">char类型可以保存 int的常量值，但不能保存int的变量值，需要强转</mark>  </p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>m<span class="token punctuation">;</span><span class="token comment">//ture</span></code></pre></li>
<li><p><strong>byte    short    char    类型在进行运算时，当做int类型处理</strong></p>
</li>
</ol>
<h2 id="2-4-基本数据类型和String类型转换"><a href="#2-4-基本数据类型和String类型转换" class="headerlink" title="2.4 基本数据类型和String类型转换"></a>2.4 基本数据类型和String类型转换</h2><h4 id="x1F31E-基本类型转String类型"><a href="#x1F31E-基本类型转String类型" class="headerlink" title="&#x1F31E;基本类型转String类型"></a>&#x1F31E;基本类型转String类型</h4>  <table><tr><td bgcolor="yellow"><font size="5">语法：<mark style="background-color:#00BFFF">将基本类型的值  + ” “</mark></font></td></tr></table>

  <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">float</span> n2 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> n3 <span class="token operator">=</span> <span class="token number">3.4</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> n2 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> n3 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span></code></pre>

<h4 id="x1F31E-String类型转基本数据类型"><a href="#x1F31E-String类型转基本数据类型" class="headerlink" title="&#x1F31E;String类型转基本数据类型"></a>&#x1F31E;String类型转基本数据类型</h4><p>  语法：通过基本类型的包装类调用<mark style="background-color:#00BFFF">parseXX方法</mark></p>
  <pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">InterInt</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">InterInt</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token class-name">InterInt</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="x1F31E-注意事项"><a href="#x1F31E-注意事项" class="headerlink" title="&#x1F31E;注意事项"></a>&#x1F31E;注意事项</h4><p>(1) 在将String 类型转成基本数据类型时，要确保String类型能够转成有效的数据，比如我们可以把”123” , 转成一个整数，但是不能把”hello” 转成一个整数。  </p>
<p>(2) 如果格式不正确，就会抛出异常，程序就会终止。</p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>3.java运算符</title>
    <url>/2022/05/18/3-yun-suan-fu/</url>
    <content><![CDATA[<h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><h2 id="x1F9CA-3-1-算数运算符"><a href="#x1F9CA-3-1-算数运算符" class="headerlink" title="&#x1F9CA;3.1 算数运算符"></a>&#x1F9CA;3.1 算数运算符</h2><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>  算术运算符是对数值类型的变量进行运算的  </p>
<p>  <img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/suanshu.jpg">  </p>
<h3 id="x1F379-3-1-1-号使用"><a href="#x1F379-3-1-1-号使用" class="headerlink" title="&#x1F379;3.1.1+号使用"></a>&#x1F379;3.1.1+号使用</h3><ol>
<li><p>当左右两边都是数值型时，则做加法运算</p>
</li>
<li><p>当左右两边有一方为<strong>字符串，则做拼接运算</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out，<span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment">//198</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"100"</span> <span class="token operator">+</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10098</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//103hello</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello1003</span></code></pre></li>
</ol>
<h3 id="x1F379-3-1-2-号使用"><a href="#x1F379-3-1-2-号使用" class="headerlink" title="&#x1F379;3.1.2 ++号使用"></a>&#x1F379;3.1.2 ++号使用</h3><ul>
<li><p>前＋＋和后＋+都完全等价子 i=i+1;作为表达式使用</p>
<p>前++：++先自增后赋值</p>
<p>后++：i++先赋值后自增</p>
</li>
</ul>
<h3 id="x1F379-3-1-3-号使用"><a href="#x1F379-3-1-3-号使用" class="headerlink" title="&#x1F379;3.1.3 %号使用"></a>&#x1F379;3.1.3 %号使用</h3><table><tr><td bgcolor="yellow"><font size="5">a % b 当a是小数时，<mark style="background-color:#00BFFF">公式 = a - (int)a / b * b</mark>  </font></td></tr></table>

<h2 id="x1F9CA-3-2-关系运算符"><a href="#x1F9CA-3-2-关系运算符" class="headerlink" title="&#x1F9CA;3.2 关系运算符"></a>&#x1F9CA;3.2 关系运算符</h2><ul>
<li>关系运算符的结果都是boolean 型，也就是要么是true，要么是false</li>
<li>关系表达式经常用在if 结构的条件中或循环结构的条件中  </li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/guanxi.jpg">  </p>
<h2 id="x1F9CA-3-3-逻辑运算符"><a href="#x1F9CA-3-3-逻辑运算符" class="headerlink" title="&#x1F9CA;3.3 逻辑运算符"></a>&#x1F9CA;3.3 逻辑运算符</h2><ul>
<li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用于连接多个条件(多个关系表达式)，结果是boolean  </p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/luoji.jpg">  </p>
<h3 id="x1F379-3-3-1-amp-amp-和-amp-基本规则"><a href="#x1F379-3-3-1-amp-amp-和-amp-基本规则" class="headerlink" title="&#x1F379;3.3.1  &amp;&amp;和&amp;基本规则"></a>&#x1F379;3.3.1  &amp;&amp;和&amp;基本规则</h3></li>
<li><h4 id="amp-amp-短路与"><a href="#amp-amp-短路与" class="headerlink" title="&amp;&amp; 短路与:"></a>&amp;&amp; 短路与:</h4><p>如果第一个条件为 false ，后面的条件不再判断</p>
</li>
<li><h4 id="amp-逻辑与"><a href="#amp-逻辑与" class="headerlink" title="&amp; 逻辑与:"></a>&amp; 逻辑与:</h4><p>如果第一个条件为 false ，后面的条件仍然判断</p>
</li>
</ul>
<h3 id="x1F379-3-3-2-和-基本规则"><a href="#x1F379-3-3-2-和-基本规则" class="headerlink" title="&#x1F379;3.3.2  ||和|基本规则"></a>&#x1F379;3.3.2  ||和|基本规则</h3><ul>
<li><h4 id="短路或"><a href="#短路或" class="headerlink" title="|| 短路或:"></a>|| 短路或:</h4><p>如果第一个条件为 true，则第二个条件不会判断，结果为true</p>
</li>
<li><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="|  逻辑或:"></a>|  逻辑或:</h4><p>不管第一个条件是否为true，第二个条件都要判断</p>
</li>
</ul>
<h3 id="x1F379-3-3-3-逻辑异或"><a href="#x1F379-3-3-3-逻辑异或" class="headerlink" title="&#x1F379;3.3.3  ^逻辑异或"></a>&#x1F379;3.3.3  ^逻辑异或</h3><ul>
<li>当a和b不同时，则结果为true，否则为false<br><mark style="background-color:#00BFFF">c语言:   <strong>同 0，异 1</strong></mark></li>
</ul>
<h2 id="x1F9CA-3-4-赋值运算符"><a href="#x1F9CA-3-4-赋值运算符" class="headerlink" title="&#x1F9CA;3.4 赋值运算符"></a>&#x1F9CA;3.4 赋值运算符</h2><ul>
<li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>赋值运算符就是将某个运算后的值，赋给指定的变量</p>
</li>
<li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p><mark style="background-color:#00BFFF">运算顺序从右往左</mark></p>
</li>
<li><p>赋值运算符的左边只能是变量，右边可以是变量、表达式、常量值</p>
</li>
<li><p>复合赋值： a  *=  b  等于  a  =  a  *  b</p>
</li>
<li><p><mark style="background-color:#00BFFF"><strong>复合赋值运算符会进行类型转换</strong></mark></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
b <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//等价于 b = (byte)(b + 2)</span>
b<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//等价于 b = (byte)(b + 1)</span></code></pre></li>
</ol>
</li>
</ul>
<h2 id="x1F9CA-3-5-三元运算符"><a href="#x1F9CA-3-5-三元运算符" class="headerlink" title="&#x1F9CA;3.5 三元运算符"></a>&#x1F9CA;3.5 三元运算符</h2><ul>
<li><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4></li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">条件表达式？表达式<span class="token number">1</span>：表达式<span class="token number">2</span><span class="token punctuation">;</span>
  
  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token operator">></span>b <span class="token operator">?</span> a<span class="token operator">++</span><span class="token operator">:</span>b<span class="token operator">--</span><span class="token punctuation">;</span></code></pre>

<ul>
<li><h4 id="运算规则："><a href="#运算规则：" class="headerlink" title="运算规则："></a>运算规则：</h4><ol>
<li>如果条件表达式为true，运算后的结果是表达式1;</li>
<li>如果条件表达式为false，运算后的结果是表达式2;</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>表达式1和表达式2要为可以赋给接收变量的类型(或可以自动转换)<!--三元运算符是一个整体，精度保持一致--></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></li>
<li><p>三元运算符可以转成  if–else语句</p>
</li>
</ol>
</li>
</ul>
<h2 id="x1F9CA-3-6-运算符优先级"><a href="#x1F9CA-3-6-运算符优先级" class="headerlink" title="&#x1F9CA;3.6 运算符优先级"></a>&#x1F9CA;3.6 运算符优先级</h2><ul>
<li><h4 id="优先级："><a href="#优先级：" class="headerlink" title="优先级："></a>优先级：</h4><ol>
<li>()  {} , 等</li>
<li>单目运算符 ++ –</li>
<li>算术运算符</li>
<li>位移运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>三元运算符</li>
<li>赋值运算符</li>
</ol>
</li>
</ul>
<table><tr><td bgcolor="yellow"><font size="5">单、算、位、比、逻、三、赋</font></td></tr></table>

<p>  <img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/ysf.jpg">  </p>
<h2 id="x1F9CA-3-7-标识符的命名规则和规范"><a href="#x1F9CA-3-7-标识符的命名规则和规范" class="headerlink" title="&#x1F9CA;3.7 标识符的命名规则和规范"></a>&#x1F9CA;3.7 标识符的命名规则和规范</h2><ul>
<li><h4 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h4><ol>
<li><mark style="background-color:#00BFFF">由26个英文字母大小写，0~9，_或＄组成</mark></li>
<li>数字不可开头</li>
<li>不司以使用关键字和保留宇，但能包含关键字和保留字</li>
<li>Java中严格区分大小写，长度无限制</li>
<li>标识符不能包含空格</li>
</ol>
</li>
<li><h4 id="规范："><a href="#规范：" class="headerlink" title="规范："></a>规范：</h4><ol>
<li><strong>包名：</strong>多单词组成时<mark style="background-color:#00BFFF">所有字母都小写：</mark>aaa.bbb.ccc</li>
<li><strong>类名、接口名：</strong>多单词组成时，<mark style="background-color:#00BFFF">所有单词的<b>首字母大写</b>：</mark>XxxYyyZzz</li>
<li><strong>变量名、方法名：</strong>多单词组成时，<mark style="background-color:#00BFFF">第一个单词首字母小写，第二个单词开始每个单词首字母大写</mark>：xxxYyyzzz</li>
<li><strong>常量名：</strong><mark style="background-color:#00BFFF">所有字母都大写，多单词时每个单词用下划线连接</mark>：XXX_YYY_ZZZ</li>
</ol>
</li>
</ul>
<h2 id="x1F9CA-3-8-关键字、保留字"><a href="#x1F9CA-3-8-关键字、保留字" class="headerlink" title="&#x1F9CA;3.8 关键字、保留字"></a>&#x1F9CA;3.8 关键字、保留字</h2><ul>
<li><h4 id="关键字基本介绍："><a href="#关键字基本介绍：" class="headerlink" title="关键字基本介绍："></a>关键字基本介绍：</h4><p>被Java语言赋子了特殊含义，用做专门用途的字符串(单词)</p>
<p>特点：关键字中所有字母都为小写  </p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/g1.jpg">  </p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/g2.jpg">  </p>
<ul>
<li><h4 id="保留字基本介绍："><a href="#保留字基本介绍：" class="headerlink" title="保留字基本介绍："></a>保留字基本介绍：</h4></li>
</ul>
<p>现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留宇</p>
<p>byValue、cast、future、 generic、 inner、 operator、outer、rest、var、goto、const</p>
</li>
</ul>
<h2 id="x1F9CA-3-9-键盘输入"><a href="#x1F9CA-3-9-键盘输入" class="headerlink" title="&#x1F9CA;3.9 键盘输入"></a>&#x1F9CA;3.9 键盘输入</h2><ul>
<li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取<br>lnput.java，需要一个扫描器(对象)，就是 Scanner</p>
</li>
<li><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4></li>
</ul>
<p> <mark style="background-color:#00BFFF"> 1. 导入该类的包，java.util.*<br>  2. 创建该类的对象(声明变量)<br>  3. 调用里面的功能<br>  </mark></p>
<pre><code> <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> hello <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> myScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.in 代表使用键盘输入</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> myScanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> myScanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字="</span><span class="token operator">+</span>name<span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span><span class="token string">"年龄="</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
</code></pre>
<h2 id="x1F9CA-3-10-进制⭐️"><a href="#x1F9CA-3-10-进制⭐️" class="headerlink" title="&#x1F9CA;3.10 进制⭐️"></a>&#x1F9CA;3.10 进制⭐️</h2><ul>
<li>二进制：0.1，满2进1，以0b或0B开头</li>
<li>十进制：0-9，满10进1</li>
<li>八进制：0-7，满8进1，以数字0开头表示</li>
<li>十六进制：0-9及A(10)-F(15)，满16进1.以Ox或0x开头表示，此处的A-F不区分大小写</li>
</ul>
<h3 id="x1F379-3-10-1-其他转十进制"><a href="#x1F379-3-10-1-其他转十进制" class="headerlink" title="&#x1F379;3.10.1 其他转十进制"></a>&#x1F379;3.10.1 其他转十进制</h3><ul>
<li><p>从最低位开始，将每个位上的数提取出来，乘以(几进制)的(位数-1)次方</p>
<p>例：0b01011 = 1 * 2^(1-1) + 1 * 2^(2-1) + 0 * 2^(3-1) + 1 * 2^(4-1) = 1 + 2 + 0 + 8 =11</p>
</li>
</ul>
<h3 id="x1F379-3-10-2-十进制转其他"><a href="#x1F379-3-10-2-十进制转其他" class="headerlink" title="&#x1F379;3.10.2 十进制转其他"></a>&#x1F379;3.10.2 十进制转其他</h3><ul>
<li>将该数不断除(几进制)，直到商为0，每步余数倒写</li>
</ul>
<h3 id="x1F379-3-10-3-二进制转八-十六"><a href="#x1F379-3-10-3-二进制转八-十六" class="headerlink" title="&#x1F379;3.10.3 二进制转八/十六"></a>&#x1F379;3.10.3 二进制转八/十六</h3><ul>
<li>从低位开始，每三位一组，转成对应八进制</li>
<li>从低位开始，每四位一组，转成对应十六进制</li>
</ul>
<h3 id="x1F379-3-10-4-八-十六进制转二"><a href="#x1F379-3-10-4-八-十六进制转二" class="headerlink" title="&#x1F379;3.10.4 八/十六进制转二"></a>&#x1F379;3.10.4 八/十六进制转二</h3><ul>
<li>将八进制的每一位，转成对应的一个三位的二进制数</li>
<li>将十六进制的每一位，转成对应的一个四位的二进制数</li>
</ul>
<h2 id="x1F9CA-3-11-原码-反码-补码⭐️⭐️"><a href="#x1F9CA-3-11-原码-反码-补码⭐️⭐️" class="headerlink" title="&#x1F9CA;3.11 原码  反码 补码⭐️⭐️"></a>&#x1F9CA;3.11 原码  反码 补码⭐️⭐️</h2><ul>
<li><h4 id="运算规则：-1"><a href="#运算规则：-1" class="headerlink" title="运算规则："></a>运算规则：</h4><ol>
<li>二进制的最高位是符号位：<strong>0表示正数，1表示负数</strong></li>
<li><strong>正数的原码，反码，补码都一样(三码合一)</strong></li>
<li><strong>负数的反码=它的原码符号位不变，其它位取反</strong></li>
<li><strong>负数的补码=它的反码＋1，负数的反码=负数的补码- 1</strong></li>
<li>0的反码，补码都是0</li>
<li><mark style="background-color:#00BFFF">java中的数都是有符号的</mark></li>
<li>计算机运算的时候，都是以补码的方式来运算的</li>
<li>看运算结果的时候，要看他的原码</li>
</ol>
</li>
</ul>
<h2 id="x1F9CA-3-12-位运算符⭐️"><a href="#x1F9CA-3-12-位运算符⭐️" class="headerlink" title="&#x1F9CA;3.12 位运算符⭐️"></a>&#x1F9CA;3.12 位运算符⭐️</h2><ul>
<li><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ul>
<li><p>按位与  &amp;</p>
</li>
<li><p>按位或  | </p>
</li>
<li><p>按位异或  ^  </p>
</li>
<li><p>按位取反  ~ </p>
</li>
<li><p>算数右移  &gt;&gt;  <mark style="background-color:#00BFFF">低位溢出，符号位不变，并用符号位补溢出的高位(本质/2)</mark><br></p>
</li>
<li><p>算数左移  &lt;&lt;  <mark style="background-color:#00BFFF">符号位不变，低位补0(本质*2)</mark><br></p>
</li>
<li><p>逻辑右移  &gt;&gt;&gt;  <mark style="background-color:#00BFFF">低位溢出，高位补0</mark></p>
</li>
</ul>
</li>
<li><h4 id="位运算过程："><a href="#位运算过程：" class="headerlink" title="位运算过程："></a>位运算过程：</h4><ol>
<li>用原码得到补码</li>
<li>用补码进行相关逻辑运算</li>
<li>运算完毕将补码转换成原码  </li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/IMG_1.jpg">  </p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/IMG_2.jpg"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>4.java控制结构</title>
    <url>/2022/05/19/4-kong-zhi-jie-gou/</url>
    <content><![CDATA[<h1 id="4-控制结构"><a href="#4-控制结构" class="headerlink" title="4 控制结构"></a>4 控制结构</h1><h2 id="x1F9CA-4-1顺序"><a href="#x1F9CA-4-1顺序" class="headerlink" title="&#x1F9CA;4.1顺序"></a>&#x1F9CA;4.1顺序</h2><ul>
<li><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>程序从上到下逐行地执行，中间没有任何判断和跳转</p>
</li>
<li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><p>Java中定义成员变量时采用合法的前向引用(先定义再引用)</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre></li>
</ul>
<h2 id="x1F9CA-4-2-分支控制-if-else-switch"><a href="#x1F9CA-4-2-分支控制-if-else-switch" class="headerlink" title="&#x1F9CA;4.2 分支控制(if  else  switch)"></a>&#x1F9CA;4.2 分支控制(if  else  switch)</h2><h3 id="x1F379-4-2-1-单分支"><a href="#x1F379-4-2-1-单分支" class="headerlink" title="&#x1F379;4.2.1 单分支"></a>&#x1F379;4.2.1 单分支</h3><ul>
<li><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  执行代码块<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>当条件表达式为ture 时，就会执行{}的代码。如果为false，就不执行</li>
<li>如果{}中只有一条语句，则可以不用{}，建议写上{}</li>
</ol>
</li>
</ul>
<h3 id="x1F379-4-2-2-双分支"><a href="#x1F379-4-2-2-双分支" class="headerlink" title="&#x1F379;4.2.2 双分支"></a>&#x1F379;4.2.2 双分支</h3><ul>
<li><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  执行代码块<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
  执行代码块<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="注意事项和细节：-2"><a href="#注意事项和细节：-2" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>当条件表达式成立，即执行代码块1，否则执行代码块2</li>
<li>如果执行代码块有一条语句，则{}可以省略，否则，不能省略<h3 id="x1F379-4-2-3-多分支"><a href="#x1F379-4-2-3-多分支" class="headerlink" title="&#x1F379;4.2.3 多分支"></a>&#x1F379;4.2.3 多分支</h3></li>
</ol>
</li>
<li><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  执行代码块<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  执行代码块<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
  执行代码块n<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="注意事项和细节：-3"><a href="#注意事项和细节：-3" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>当条件表达式1成立时，即执行代码块1</li>
<li>如果表达式1不成立，才去判断表达式2是否成立</li>
<li>如果表达式2成立，就执行代码块2</li>
<li>以此类推，如果所有的表达式都不成立则执行else的代码块</li>
<li>多分支可以没有else</li>
</ol>
</li>
</ul>
<h3 id="x1F379-4-2-4-嵌套分支"><a href="#x1F379-4-2-4-嵌套分支" class="headerlink" title="&#x1F379;4.2.4 嵌套分支"></a>&#x1F379;4.2.4 嵌套分支</h3><ul>
<li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>在一个分支结构中又完整的嵌套了另个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支</p>
</li>
<li><h4 id="基本语法：-3"><a href="#基本语法：-3" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//if-else</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//if-else</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ul>
<h3 id="x1F379-4-2-5-switch分支结构"><a href="#x1F379-4-2-5-switch分支结构" class="headerlink" title="&#x1F379;4.2.5 switch分支结构"></a>&#x1F379;4.2.5 switch分支结构</h3><ul>
<li><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>
      语句块<span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    
    <span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>
      语句块<span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    
    <span class="token keyword">default</span><span class="token operator">:</span>
      语句块<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ol>
<li>switch 关键字，表示swtich分支</li>
<li>表达式对应一个值</li>
<li>case 常量1:当表达式的值等于常量1，就执行语句块1</li>
<li>break ：表示退出swtich</li>
<li>如果和 case 常量1匹配，就执行语句块1，如果没有匹配，就继续匹配 case 常量2</li>
<li><strong>如果一个都没有匹配上，执行default</strong></li>
</ol>
</li>
<li><h4 id="注意事项和细节：-4"><a href="#注意事项和细节：-4" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><mark>表达式数据类型，应和case 后的常量类型一致，或者是可以自动转成可以相互比较的类型，比如输入的是字符，而常量是 int</mark></li>
<li><strong>switch(表达式)中表达式的返回值必须是：(byte,short.int,char,enum,String)</strong></li>
<li>case子句中的值必须是常量,而不能是变量</li>
<li><strong>default子句是可选的，当没有匹配的case时，执行default</strong></li>
<li>break语句跳出switch语句块，如果没有break，程序会执行到结尾</li>
</ol>
</li>
</ul>
<h2 id="x1F9CA-4-3-循环控制-for-while-do-while-⭐️"><a href="#x1F9CA-4-3-循环控制-for-while-do-while-⭐️" class="headerlink" title="&#x1F9CA;4.3 循环控制(for  while  do while)⭐️"></a>&#x1F9CA;4.3 循环控制(for  while  do while)⭐️</h2><h3 id="x1F379-4-3-1-for循环控制"><a href="#x1F379-4-3-1-for循环控制" class="headerlink" title="&#x1F379;4.3.1  for循环控制"></a>&#x1F379;4.3.1  for循环控制</h3><ul>
<li><h4 id="基本语法：-4"><a href="#基本语法：-4" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>循环变量初始化<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>循环变量迭代<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  循环操作语句<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h4><ol>
<li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li>
<li>循环操作，这里可以有多条语句，也就是我们要循环执行的代码</li>
<li>如果 循环操作(语句) 只有一条语句，可以省路{}，建议不要省略</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-5"><a href="#注意事项和细节：-5" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><mark>循环条件是返回一个布尔值的表达式</mark></li>
<li><strong>for(;循环判断条件;)中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略</strong></li>
<li>循环初始值可以有多条初始化语句，但要求类型一样，井且中间用逗号隔开</li>
<li>循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开</li>
</ol>
</li>
</ul>
<h3 id="x1F379-4-3-2-while循环控制"><a href="#x1F379-4-3-2-while循环控制" class="headerlink" title="&#x1F379;4.3.2  while循环控制"></a>&#x1F379;4.3.2  while循环控制</h3><ul>
<li><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><pre class="language-java" data-language="java"><code class="language-java">循环变量初始化<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  循环体<span class="token punctuation">;</span>
  循环变量迭代<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="说明：-2"><a href="#说明：-2" class="headerlink" title="说明："></a>说明：</h4><ol>
<li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li>
<li>四要素位置不同</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-6"><a href="#注意事项和细节：-6" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>循环条件是返回一个布尔值的表达式</li>
<li>while循环是先判断在执行语句</li>
</ol>
</li>
</ul>
<h3 id="x1F379-4-3-3-do-while循环控制"><a href="#x1F379-4-3-3-do-while循环控制" class="headerlink" title="&#x1F379;4.3.3  do while循环控制"></a>&#x1F379;4.3.3  do while循环控制</h3><ul>
<li><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><pre class="language-java" data-language="java"><code class="language-java">循环变量初始化<span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">&#123;</span>
  循环体<span class="token punctuation">;</span>
  循环变量迭代<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
<li><h4 id="说明：-3"><a href="#说明：-3" class="headerlink" title="说明："></a>说明：</h4><ol>
<li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li>
<li>四要素位置不同</li>
<li>先执行在判断，至少执行一次</li>
<li>最后有一个;</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-7"><a href="#注意事项和细节：-7" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>循环条件是返回一个布尔值的表达式</li>
<li><strong>先执行在判断，至少执行一次</strong></li>
</ol>
</li>
</ul>
<h3 id="x1F379-4-3-4-多重循环控制"><a href="#x1F379-4-3-4-多重循环控制" class="headerlink" title="&#x1F379;4.3.4 多重循环控制"></a>&#x1F379;4.3.4 多重循环控制</h3><ul>
<li><h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><ol>
<li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for,while,do.while均可以作为外层循环和内层循环</li>
<li>嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为false时，才会完全跳出内层盾环，才可结束外层的当次循环，开始下一次的循环</li>
<li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次</li>
</ol>
</li>
</ul>
<h2 id="x1F9CA-4-4-跳转控制break"><a href="#x1F9CA-4-4-跳转控制break" class="headerlink" title="&#x1F9CA;4.4 跳转控制break"></a>&#x1F9CA;4.4 跳转控制break</h2><ul>
<li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>break语句用于终止某个语句块的执行，一般使用在switch或者循环[for,while,do while]</p>
</li>
<li><h4 id="注意事项和细节：-8"><a href="#注意事项和细节：-8" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p><mark style="background-color:#00BFFF"> break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</mark></p>
</li>
<li><p>标签的基本使用</p>
<pre class="language-java" data-language="java"><code class="language-java">label1<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  label2<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  	<span class="token keyword">break</span> label1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
</ul>
<h2 id="x1F9CA-4-5-跳转控制continue"><a href="#x1F9CA-4-5-跳转控制continue" class="headerlink" title="&#x1F9CA;4.5 跳转控制continue"></a>&#x1F9CA;4.5 跳转控制continue</h2><ul>
<li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>continue语句用于结束本次循环，继续执行下一次循环</p>
</li>
<li><p><mark style="background-color:#00BFFF">continue语句出现在多层嵌套的福环语句体中时，可以通过标签指明要跳过的是哪一层循环</mark></p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-9"><a href="#注意事项和细节：-9" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p> continue语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p>
</li>
<li><p>标签的基本使用</p>
<pre class="language-java" data-language="java"><code class="language-java">label1<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  label2<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  	<span class="token keyword">continue</span> label1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
</ul>
<h2 id="x1F9CA-4-6-跳转控制return"><a href="#x1F9CA-4-6-跳转控制return" class="headerlink" title="&#x1F9CA;4.6 跳转控制return"></a>&#x1F9CA;4.6 跳转控制return</h2><ul>
<li><h4 id="基本介绍：-4"><a href="#基本介绍：-4" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>return使用在方法，表示跳出所在的方法</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>6.面向对象(基础部分)</title>
    <url>/2022/05/22/6-mian-xiang-dui-xiang-ji-chu-bu-fen/</url>
    <content><![CDATA[<h1 id="6-面向对象-基础"><a href="#6-面向对象-基础" class="headerlink" title="6 面向对象(基础)"></a>6 面向对象(基础)</h1><h2 id="6-1-类与对象"><a href="#6-1-类与对象" class="headerlink" title="6.1 类与对象"></a>6.1 类与对象</h2><ul>
<li><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>类是抽象的，概念的，代表一类事物,比如人类, 猫类…即它是数据类型</li>
<li>对象是具体的，实际的，代表一个具体事物，即是实例</li>
<li>类是对象的模板，对象是类的一个个体，对应一个实例</li>
</ul>
</li>
<li><h4 id="对象存在形式⭐️"><a href="#对象存在形式⭐️" class="headerlink" title="对象存在形式⭐️"></a>对象存在形式⭐️</h4><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/H6.1.jpg"></p>
</li>
</ul>
<h3 id="6-1-1属性-成员变量"><a href="#6-1-1属性-成员变量" class="headerlink" title="6.1.1属性/成员变量"></a>6.1.1属性/成员变量</h3><ul>
<li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>从概念或叫法上看：<strong>成员变量 = 属性 =field(字段)</strong></p>
</li>
<li><p>属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)，比如定义猫类 的 int age 就是属性</p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名</p>
</li>
<li><p>访问修饰符：控制属性和访问范围，有四种访问修饰符 public,proctected,defaul,private</p>
</li>
<li><p>属性的定义类型可以为任意类型，包含基本类型或引用类型</p>
</li>
<li><p><strong>属性如果不赋值，有默认值，规则和数组一致:</strong></p>
<p>int0,short 0, byte 0, long 0, float 0.0,double 0.0<br>char \u0000,boolean false, String null</p>
</li>
</ol>
</li>
</ul>
<h3 id="6-1-2如何创建对象"><a href="#6-1-2如何创建对象" class="headerlink" title="6.1.2如何创建对象"></a>6.1.2如何创建对象</h3><ul>
<li><h4 id="先声明在创建"><a href="#先声明在创建" class="headerlink" title="先声明在创建"></a>先声明在创建</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
<li><h4 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Cat</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
<li><h4 id="对象创建流程分析⭐️⭐️"><a href="#对象创建流程分析⭐️⭐️" class="headerlink" title="对象创建流程分析⭐️⭐️"></a>对象创建流程分析⭐️⭐️</h4><ol>
<li><p>加载Person类信息(就是Person.class 且只加载一次)</p>
</li>
<li><p>在堆中分配空间(地址)</p>
</li>
<li><p><strong>完成对象初始化</strong></p>
<p>**(3.1默认初始化 age = 0 name =null  **</p>
<p>**3.2显示初始化 age = 90 name = null **</p>
<p><strong>3.3构造器初始化 age = 20 name = 小倩)</strong></p>
</li>
<li><p>在对象在堆中的地址返回给P(P是对象名，是对象的引用)</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/H6.1.2.jpg"></p>
</li>
</ul>
<h3 id="6-1-3对象分配机制"><a href="#6-1-3对象分配机制" class="headerlink" title="6.1.3对象分配机制"></a>6.1.3对象分配机制</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p2 <span class="token operator">=</span> p1<span class="token comment">//把p1赋给了p2，或让p2指向p1</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>


<p>  <img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/H6.1.3.jpg">  </p>
<ul>
<li><h4 id="Java内存结构分析："><a href="#Java内存结构分析：" class="headerlink" title="Java内存结构分析："></a>Java内存结构分析：</h4><ol>
<li>栈：一般存放基本数据类型(局部变量)</li>
<li>堆：存放对象(Cat cat，数组等)</li>
<li>方法区：常量池(常量，比如字符串)，类加载信息</li>
</ol>
</li>
<li><h4 id="Java创建对象流程"><a href="#Java创建对象流程" class="headerlink" title="Java创建对象流程"></a>Java创建对象流程</h4><ol>
<li><p>先加载Person类信息(属性和方法信息，只会加载一次)</p>
</li>
<li><p>在堆中分配空间，进行默认初始化(看规则)</p>
</li>
<li><p>把地址赋给 p，p就指向对象</p>
</li>
<li><p>行指定初始化，比如 p.name =” jack”  p.age = 10  </p>
</li>
</ol>
</li>
</ul>
<pre><code> <pre class="language-java" data-language="java"><code class="language-java">     <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>
     p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     ```  


## <span class="token number">6.2</span> 成员方法⭐️

<span class="token operator">-</span> #### 方法定义：

  <span class="token number">1.</span> 访问修饰符 返回数据类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token comment">//方法体</span>

     ​            语句<span class="token punctuation">;</span>

     ​            <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>

     <span class="token punctuation">&#125;</span>

     <span class="token number">1.</span> 形参列表：表示成员方法输入 callint n<span class="token punctuation">)</span>
     <span class="token number">2.</span> 数据类型<span class="token punctuation">(</span>返回类型<span class="token punctuation">)</span>：表示成员方法输出，<span class="token keyword">void</span> 表示没有返回值
     <span class="token number">3.</span> 方法主体：表示为了实现某一功能代码块
     <span class="token number">4.</span> <span class="token keyword">return</span> 语句不是必须的

### <span class="token number">6.2</span><span class="token number">.1</span> 调用方法：

<span class="token number">1.</span> <span class="token keyword">public</span> 表示方法是公开

<span class="token number">2.</span> <span class="token keyword">void</span>：表示方法没有返回值

<span class="token number">3.</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：speak是方法名，<span class="token punctuation">(</span><span class="token punctuation">)</span>形参列表

<span class="token number">4.</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>方法体，可以写我们要执行的代码

<span class="token number">5.</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>”我是一个好人”<span class="token punctuation">)</span>；表示我们的方法就是输出一句话

<span class="token number">6.</span> p1<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>为调用

   ```java
   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method01</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           p1<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           p1<span class="token punctuation">.</span><span class="token function">cal01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           p1<span class="token punctuation">.</span><span class="token function">cal02</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">int</span> returnRes <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>returnRes<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
   
   <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
       <span class="token class-name">String</span> name<span class="token punctuation">;</span>
       <span class="token keyword">int</span> age<span class="token punctuation">;</span>
   
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你是一个呆猪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               res <span class="token operator">+=</span> i<span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               res <span class="token operator">+=</span> i<span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
           <span class="token keyword">return</span> res<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span></code></pre>
</code></pre>
<h3 id="6-2-2-调用的内存机制："><a href="#6-2-2-调用的内存机制：" class="headerlink" title="6.2.2 调用的内存机制："></a>6.2.2 调用的内存机制：</h3><ul>
<li><h4 id="调用的内存机制："><a href="#调用的内存机制：" class="headerlink" title="调用的内存机制："></a>调用的内存机制：</h4></li>
</ul>
<ol>
<li><p>public 表示方法是公开的</p>
</li>
<li><p>int :表示方法执行后，返回一个 int 值</p>
</li>
<li><p>getsum 方法名</p>
</li>
<li><p>(int num1， int num2) 形参列表，2个形参，可以接收用户传入的两个数</p>
</li>
<li><p>return res；表示把res 的值，返回</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/H6.2.2.jpg"></p>
</li>
</ol>
<h3 id="6-2-3-注意事项和细节"><a href="#6-2-3-注意事项和细节" class="headerlink" title="6.2.3 注意事项和细节"></a>6.2.3 注意事项和细节</h3><ul>
<li><h4 id="访问修饰符："><a href="#访问修饰符：" class="headerlink" title="访问修饰符："></a>访问修饰符：</h4><ol>
<li>作用是控制方法使用的适用范围，若果不写则默认访问</li>
</ol>
</li>
<li><h4 id="返回类型："><a href="#返回类型：" class="headerlink" title="返回类型："></a>返回类型：</h4><ol>
<li>一个方法最多有一个返回值</li>
<li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</li>
<li><strong>方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值;要求返回值类型必须和return的值类型一致或兼容</strong></li>
<li>如果方法是void，则方法体中可以没有return语句，或者 只写 return</li>
</ol>
</li>
<li><h4 id="方法名："><a href="#方法名：" class="headerlink" title="方法名："></a>方法名：</h4><ol>
<li>方法名遵循驼峰法则</li>
</ol>
</li>
<li><h4 id="参数列表："><a href="#参数列表：" class="headerlink" title="参数列表："></a>参数列表：</h4><ol>
<li><p>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开，比如 getSum(int n1,int n2)</p>
</li>
<li><p>参数类型可以为任意类型，包含基本类型或引用类型，比如 printArr(intlIl map)</p>
</li>
<li><p>调用参数的方法时，一定对应着参数列表传入相同类型或莱容类型 的参数</p>
</li>
<li><p>方法定义时的参数称为形式参数，简称形参；方法调用时的参数称为实际参数，简称实参，实参和形参的类型要一致或兼容、个数、顺序必须一致</p>
</li>
</ol>
</li>
<li><h4 id="方法体："><a href="#方法体：" class="headerlink" title="方法体："></a>方法体：</h4><ol>
<li>里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用</li>
<li>里面不能再定义方法！即：<strong>方法不能嵌套定义</strong></li>
</ol>
</li>
<li><h4 id="方法调用细节："><a href="#方法调用细节：" class="headerlink" title="方法调用细节："></a>方法调用细节：</h4><ol>
<li>同一个类中的方法调用：直接调用即可</li>
<li>跨类中的方法A类调用B类方法：需要通过对象名调用</li>
<li>跨类的方法调用和方法的访问修饰符相关</li>
</ol>
</li>
</ul>
<h2 id="6-3-成员方传法参机制⭐️⭐️"><a href="#6-3-成员方传法参机制⭐️⭐️" class="headerlink" title="6.3 成员方传法参机制⭐️⭐️"></a>6.3 成员方传法参机制⭐️⭐️</h2><h3 id="6-3-1-基本数据类型的传参数机制"><a href="#6-3-1-基本数据类型的传参数机制" class="headerlink" title="6.3.1 基本数据类型的传参数机制"></a>6.3.1 基本数据类型的传参数机制</h3><ul>
<li><p>传递的是值(拷贝)，形参的认何改变不影响实参</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/H6.3.1.jpg"></p>
</li>
</ul>
<h3 id="6-3-2-引用数据类型的传参数机制"><a href="#6-3-2-引用数据类型的传参数机制" class="headerlink" title="6.3.2 引用数据类型的传参数机制"></a>6.3.2 引用数据类型的传参数机制</h3><ul>
<li><p>引用类型传递的是地址(传递也是值，但是值是地址)，可以通过形参影响实参</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/H6.3.2.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/H6.3.22.jpg"></p>
</li>
</ul>
<h2 id="6-4-递归"><a href="#6-4-递归" class="headerlink" title="6.4 递归"></a>6.4 递归</h2><ul>
<li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>递归就是方法自己调用自己,每次调用时传入不同的变量</p>
</li>
<li><h4 id="递归调用内存机制"><a href="#递归调用内存机制" class="headerlink" title="递归调用内存机制"></a>递归调用内存机制</h4></li>
<li><pre class="language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recursion01</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token class-name">T</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          t1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> res <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"res = "</span><span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token keyword">class</span>  <span class="token class-name">T</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
              <span class="token function">test</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  
      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
              <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
              <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  ```  


<span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>zhi7xuan<span class="token operator">/</span>project<span class="token operator">/</span>article_picture<span class="token operator">/</span><span class="token constant">H6</span><span class="token punctuation">.</span><span class="token number">4.</span>jpg<span class="token punctuation">)</span>  


<span class="token operator">-</span> #### 注意事项和细节：

  <span class="token number">1.</span> 执行一个方法时，就创建一个新的受保护的独立空间<span class="token punctuation">(</span>栈空间<span class="token punctuation">)</span>
  <span class="token number">2.</span> <span class="token operator">*</span><span class="token operator">*</span>方法的局部变量是独立的，不会相互影响，比如n变量<span class="token operator">*</span><span class="token operator">*</span>
  <span class="token number">3.</span> <span class="token operator">*</span><span class="token operator">*</span>如果方法中使用的是引用类型变量<span class="token punctuation">(</span>比如数组、对象<span class="token punctuation">)</span>，就会共享该引用类型的数据<span class="token operator">*</span><span class="token operator">*</span>
  <span class="token number">4.</span> 递归必须向退出递归的条件逼近，否则就是无限递归
  <span class="token number">5.</span> 当一个方法执行完毕，或者遇到<span class="token keyword">return</span>，就会返回，遵守谁调用，将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕，栈空间回收

## <span class="token number">6.5</span> 方法重载 <span class="token punctuation">(</span>overload<span class="token punctuation">)</span>

<span class="token operator">-</span> #### 基本介绍：

  java中允许同一个类中，多个同名方法的存在，但要求<span class="token operator">*</span><span class="token operator">*</span>形参列表不一致<span class="token operator">*</span><span class="token operator">*</span>

<span class="token operator">-</span> #### 注意事项和细节

  <span class="token number">1.</span> 方法名：必须相同
  <span class="token number">2.</span> 形参列表：必须不同<span class="token punctuation">(</span>参数类型、个数、顺序<span class="token punctuation">)</span>
  <span class="token number">3.</span> 返回类型：无要求

## <span class="token number">6.6</span> 可变参数

<span class="token operator">-</span> #### 基本概念：

  java允许将同一个类中多个同名同功能<span class="token operator">*</span><span class="token operator">*</span>但参数个数不同<span class="token operator">*</span><span class="token operator">*</span>的方法，封装成一个方法，通过可变参数实现

<span class="token operator">-</span> #### 基本语法：

  ```java
  访问修饰符 返回类型 方法名<span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>数据类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token operator">*</span> 形参名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>可变参数的实参可以为0个或任意多个</li>
<li>可变参数的实参可以为数组</li>
<li>可变参数的本质就是数组</li>
<li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li>
<li>一个形参列表中只能出现一个可变参数</li>
</ol>
</li>
</ul>
<h2 id="6-7-变量作用域⭐️"><a href="#6-7-变量作用域⭐️" class="headerlink" title="6.7 变量作用域⭐️"></a>6.7 变量作用域⭐️</h2><ul>
<li><h4 id="全局变量和局部变量："><a href="#全局变量和局部变量：" class="headerlink" title="全局变量和局部变量："></a>全局变量和局部变量：</h4><ol>
<li>主要的变量就是属性(成员变量)和局部变量</li>
<li>局部变量一般是指在成员方法中定义的变量</li>
<li>全局变量：也就是属性，作用域为整个类体</li>
<li>局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中</li>
<li>全局变量(属性)可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使用，因为没有默认值</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-2"><a href="#注意事项和细节：-2" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>全局变量和局部变量可以重名，访问时遵循就近原则</li>
<li>在同一个作用域中，两个局部变量，不能重名</li>
<li>全局变量生命周期长，伴随着对象的创建而创建，伴随着对象的销毁而销毁</li>
<li>局部变量生命周期短，伴随着它的代码块的执行而创建，伴随着代码块的结束而结束：即在一次方法调用过程中</li>
<li>作用域范围不同<br>全局变量/属性：可以被本类使用，或其他类使用(通过对象调用)<br>局部变量：只能在本类中对应的方法中使用</li>
<li>修饰符不同<br>全局变量/属性可以加修饰符<br>局部变量不可以加修饰符</li>
</ol>
</li>
<li><h4 id="两种调用方式"><a href="#两种调用方式" class="headerlink" title="两种调用方式"></a>两种调用方式</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarScopeDetail</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">E</span> e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Per</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Per</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e1<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">E</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Per</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Per</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">Per</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//接收一个类</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Per</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ul>
<h2 id="6-8-构造器⭐️"><a href="#6-8-构造器⭐️" class="headerlink" title="6.8 构造器⭐️"></a>6.8 构造器⭐️</h2><ul>
<li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对<strong>新对象的初始化</strong></p>
</li>
<li><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 方法名 <span class="token punctuation">(</span>行参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  方法体<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="注意事项和细节：-3"><a href="#注意事项和细节：-3" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>修饰符可以默认</p>
</li>
<li><p>一个类可以定义多个不同的构造器，即构造器重载</p>
</li>
<li><p>构造器名和类名要相同</p>
</li>
<li><p>构造器没有返回值</p>
</li>
<li><p>构造器是完成对象的初始化，井不是创建对象</p>
</li>
<li><p>在创建对象时,系统自动的调用该类的构造方法</p>
</li>
<li><p><strong>如果没有定义构造器，系统会自动给类生成一个默认无参构造器(默认构造器)</strong></p>
</li>
<li><p><strong>定义了自己的构造器,默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constructor01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Pers</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Pers</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pers</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token operator">+</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token operator">+</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Pers</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Pers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器1被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">Pers</span><span class="token punctuation">(</span><span class="token class-name">String</span> pName<span class="token punctuation">,</span><span class="token keyword">int</span> pAge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器2被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name <span class="token operator">=</span> pName<span class="token punctuation">;</span>
        age <span class="token operator">=</span> pAge<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
</ul>
<h2 id="6-9-this"><a href="#6-9-this" class="headerlink" title="6.9  this"></a>6.9  this</h2><ul>
<li><h4 id="基本介绍：-4"><a href="#基本介绍：-4" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java虚拟机会给每个对象分配this，代表当前对象</p>
</li>
<li><h4 id="内存分析："><a href="#内存分析：" class="headerlink" title="内存分析："></a>内存分析：</h4><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/H6.9.jpg"></p>
</li>
<li><h4 id="注意事项和细节：-4"><a href="#注意事项和细节：-4" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>this关键字可以用来访问本类的属性、方法、构造器</li>
<li>this用于区分当前类的属性和局部变量</li>
<li>访问成员方法的语法：this.方法名(参数列表);</li>
<li><strong>访问构造器语法：this(参数列表)：注意只能在构造器中使用(在构造器中访问另外一个构造器，必须放在第一条语句)</strong></li>
<li>this不能在类定义的外部使用，只能在类定义的方法中使用</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisExercise01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token string">"marry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token string">"marry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> person<span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>person p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>7.面向对象(中级)</title>
    <url>/2022/05/23/7-mian-xiang-dui-xiang-zhong-ji/</url>
    <content><![CDATA[<h1 id="7-面向对象-中级"><a href="#7-面向对象-中级" class="headerlink" title="7 面向对象(中级)"></a>7 面向对象(中级)</h1><h2 id="7-0-IDEA"><a href="#7-0-IDEA" class="headerlink" title="7.0  IDEA"></a>7.0  IDEA</h2><ul>
<li><h4 id="常用快捷键："><a href="#常用快捷键：" class="headerlink" title="常用快捷键："></a>常用快捷键：</h4><ol>
<li>command + d  删除当前行</li>
<li>command + option + 向下光标  向下复制当前行</li>
<li>option + /  补全代码</li>
<li>command + /  注释</li>
<li>option + enter  导入该行的类</li>
<li>command + option + L  格式化代码</li>
<li>control + R  运行</li>
<li>optio + A  构造器</li>
<li>control + H 查看继承关系</li>
<li>command + B  定位方法</li>
<li>.var  自动变量名</li>
<li>Command + option + T 环绕方式</li>
</ol>
</li>
<li><h4 id="常用模版快捷键"><a href="#常用模版快捷键" class="headerlink" title="常用模版快捷键"></a>常用模版快捷键</h4><ol>
<li>fori  遍历</li>
<li>itar  遍历数组</li>
<li>iter  增强遍历</li>
<li>sout  打印换行</li>
</ol>
</li>
</ul>
<h2 id="7-1-包"><a href="#7-1-包" class="headerlink" title="7.1 包"></a>7.1 包</h2><ul>
<li><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><p>Package 包名</p>
</li>
<li><h4 id="包的命名："><a href="#包的命名：" class="headerlink" title="包的命名："></a>包的命名：</h4><ul>
<li>只能包含数字、字母、下划线、小圆点，但不能用数字开头，不能是关键字或保留字</li>
</ul>
</li>
<li><h4 id="命名规范："><a href="#命名规范：" class="headerlink" title="命名规范："></a>命名规范：</h4><ul>
<li>小写字母＋小圆点一般是  com.公司名.项目名.业务模块名</li>
</ul>
</li>
<li><h4 id="引入包："><a href="#引入包：" class="headerlink" title="引入包："></a>引入包：</h4><ol>
<li>import java.uti Scanner；就只是引入一个类Scanner</li>
<li>import java.util*：1/ 表示将java.util 包所有都引入</li>
</ol>
</li>
<li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>package 的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一个package</li>
<li>import指令 位置放在package的下面，在类定义前面,可以有多句目没有顺序要求</li>
</ol>
</li>
</ul>
<h2 id="7-2-访问修饰符"><a href="#7-2-访问修饰符" class="headerlink" title="7.2 访问修饰符"></a>7.2 访问修饰符</h2><ul>
<li><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java提供四种访问控制修饰符号，用于控制方法和属性(成员变量)的访问权限(范围)</p>
</li>
<li><h4 id="访问权限⭐️⭐️："><a href="#访问权限⭐️⭐️：" class="headerlink" title="访问权限⭐️⭐️："></a>访问权限⭐️⭐️：</h4><ol>
<li><p>公开级别：用public修饰,对外公开</p>
</li>
<li><p>受保护级别：用protected修饰，对子类和同一个包中的类公开</p>
</li>
<li><p>默认级别：没有修饰符号，向同一个包的类公开</p>
</li>
<li><p>私有级别：用private修饰,只有类本身可以访问，不对外公开</p>
<table>
<thead>
<tr>
<th>访问级别</th>
<th>访问修饰符</th>
<th>同类</th>
<th>同包</th>
<th>子类</th>
<th>不同包</th>
</tr>
</thead>
<tbody><tr>
<td>公开</td>
<td>public</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>受保护</td>
<td>protected</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>默认</td>
<td>无</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>私有</td>
<td>private</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>修饰符可以用来修饰类中的属性，成员方法以及类</li>
<li><strong>只有默认的和public才能修饰类</strong>，并目遵循上述访问权限的特点</li>
<li>子类待定</li>
<li>成员方法的访问规则和属性完全样</li>
</ol>
</li>
</ul>
<h2 id="7-3-封装⭐️"><a href="#7-3-封装⭐️" class="headerlink" title="7.3 封装⭐️"></a>7.3 封装⭐️</h2><ul>
<li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>封装(encapsulation)就是把抽象出的数据[属性]和对数据的操作方法封装在一起数据被保护在内部，程序的其它部分只有通过被授权的操作（方法），才能对数据进行操作</p>
</li>
<li><h4 id="封装步骤："><a href="#封装步骤：" class="headerlink" title="封装步骤："></a>封装步骤：</h4><ol>
<li>将属性进行私有化private【不能直接修改属性】</li>
<li>提供一个公共的(public)set方法，用于对属性判断井赋值<br>public void setxxx(类型 参数名){<pre><code>加入数据验证的业务逻辑;
    属性 = 参数名;&#125;
</code></pre>
</li>
<li>提供个公共的(public)get方法，用于获取属性的值<pre><code>public 数据类型 getXxxx0&#123;
    return XX;&#125;
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="7-4-继承⭐️"><a href="#7-4-继承⭐️" class="headerlink" title="7.4 继承⭐️"></a>7.4 继承⭐️</h2><ul>
<li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>继承可以解决代码复用，当多个类存在相同的属性(变量)和方法时,可以以这些类中抽象出交类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可</p>
</li>
<li><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4></li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/7-1.jpg"></p>
<ul>
<li><h4 id="注意事项和细节：-2"><a href="#注意事项和细节：-2" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问，但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</p>
</li>
<li><p>子类必须调用父类的构造器，完成父类的初始化</p>
</li>
<li><p>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</p>
</li>
<li><p>指定去调用父类的某个构造器，则显式的调用一下：super(参数列表)</p>
</li>
<li><p>super在使用时，必须放在构造器第一行(super只能在构造器中使用)</p>
</li>
<li><p>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</p>
</li>
<li><p>java所有类都是Object类的子类</p>
</li>
<li><p>父类构造器的调用不限于直接父类！将一直往上追潮直到Object类</p>
</li>
<li><p>子类最多只能继承一个父类(指直接继承)，即java中是单继承机制</p>
</li>
<li><p>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopBase</span> <span class="token punctuation">&#123;</span> <span class="token comment">//父类是Object</span>

    <span class="token keyword">public</span> <span class="token class-name">TopBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//super(); Object的无参构造器</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器TopBase() 被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">extends</span> <span class="token class-name">TopBase</span> <span class="token punctuation">&#123;</span> <span class="token comment">//父类</span>
    <span class="token comment">//4个属性</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n4 <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//无参构造器</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类Base()构造器被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//有参构造器</span>
        <span class="token comment">//默认super()</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类Base(String name, int age)构造器被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//有参构造器</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类Base(String name)构造器被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//父类提供一个public的方法,返回了n4</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getN4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> n4<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">test300</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test300"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test400</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test400"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//call</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callTest400</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">test400</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">/</span>输入ctrl <span class="token operator">+</span> <span class="token class-name">H</span> 可以看到类的继承关系
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span> <span class="token comment">//子类</span>

    <span class="token keyword">public</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//1. 调用父类的无参构造器, 如下或者 什么都不写,默认就是调用super()</span>
        <span class="token comment">//super();//父类的无参构造器</span>
        <span class="token comment">//2. 调用父类的 Base(String name) 构造器</span>
        <span class="token comment">//super("hsp");</span>
        <span class="token comment">//3. 调用父类的 Base(String name, int age) 构造器</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"king"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//细节：super在使用时，必须放在构造器第一行</span>
        <span class="token comment">//细节: super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</span>
        <span class="token comment">//this() 不能再使用了</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类Sub(String name, int age)构造器被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//无参构造器</span>
        <span class="token comment">//super(); //默认调用父类的无参构造器</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类Sub()构造器被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//do nothing...</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类Sub(String name)构造器被调用...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//子类方法</span>
        <span class="token comment">//非私有的属性和方法可以在子类直接访问</span>
        <span class="token comment">//但是私有属性和方法不能在子类直接访问</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> n2 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> n3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">test300</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//test400();错误</span>
        <span class="token comment">//要通过父类提供公共的方法去访问</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n4="</span> <span class="token operator">+</span> <span class="token function">getN4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">callTest400</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre></li>
</ol>
</li>
<li><h4 id="继承本质："><a href="#继承本质：" class="headerlink" title="继承本质："></a>继承本质：</h4><p>子对象创建完成，建立查找关系</p>
</li>
<li><h4 id="继承内存图："><a href="#继承内存图：" class="headerlink" title="继承内存图："></a>继承内存图：</h4><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/7-2.jpg"></p>
</li>
</ul>
<h2 id="7-5-多态⭐️⭐️"><a href="#7-5-多态⭐️⭐️" class="headerlink" title="7.5 多态⭐️⭐️"></a>7.5 多态⭐️⭐️</h2><h3 id="7-5-1多态"><a href="#7-5-1多态" class="headerlink" title="7.5.1多态"></a>7.5.1多态</h3><ul>
<li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>方法或对象具有多种形态，是面向对象的第三大特征，多态是建立在封装和继承基础之上的</p>
</li>
<li><h4 id="多态具体体现"><a href="#多态具体体现" class="headerlink" title="多态具体体现"></a>多态具体体现</h4><ul>
<li>方法的多态<ol>
<li>重写和重载就是体现多态</li>
</ol>
</li>
<li><strong>对象的多态</strong><ol>
<li>一个对象的编译类型和运行类型可以不一致</li>
<li>编译类型在定义对象时，就确定了，不能改变</li>
<li>运行类型是可以变化的</li>
<li><strong>编译类型看定义时 = 号 的左边，运行类型看 = 号的 右边</strong></li>
</ol>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-3"><a href="#注意事项和细节：-3" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ul>
<li>向上转型<ol>
<li>本质：父类的引用指向了子类的对象</li>
<li>语法：父类类型 引用名 = new 子类类型();</li>
<li>特点：编译类型看左边，运行类型看右边</li>
<li>可以调用父类中的所有成员(需遵守访问权限)</li>
<li>不能调用子类特有成员</li>
<li>最终运行效果看子类的具体实现</li>
</ol>
</li>
<li>向下转型<ol>
<li>本质：把指向子类对象的父类引用，转成子类对象的子类引用</li>
<li>语法：子类类型 引用名 = (子类类型) 父类引用;</li>
<li>只能强转父类引用，不能强转父类对象</li>
<li>父类的引用必须指向的是当前目标类型的对象</li>
<li>当向下转型后，可以调用子类类型中所有的成员</li>
</ol>
</li>
<li>属性<ol>
<li><p>属性没有重写，属性的值看编译类型</p>
</li>
<li><p><strong>instance of 比较较操作符，用于判断对象的运行类型是否为XX类型或XX类型的子类型</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolyDetail</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">//向上转型: 父类的引用指向了子类的对象</span>
        <span class="token comment">//语法：父类类型引用名 = new 子类类型();</span>
        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以吗? 可以 Object 也是 Cat的父类</span>

        <span class="token comment">//向上转型调用方法的规则如下:</span>
        <span class="token comment">//(1)可以调用父类中的所有成员(需遵守访问权限)</span>
        <span class="token comment">//(2)但是不能调用子类的特有的成员</span>
        <span class="token comment">//(#)因为在编译阶段，能调用哪些成员,是由编译类型来决定的</span>
        <span class="token comment">//animal.catchMouse();错误</span>
        <span class="token comment">//(4)最终运行效果看子类(运行类型)的具体实现, 即调用方法时，按照从子类(运行类型)开始查找方法</span>
        <span class="token comment">//，然后调用，规则我前面我们讲的方法调用规则一致。</span>
        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//猫吃鱼..</span>
        animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//跑</span>
        animal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello,你好</span>
        animal<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//睡</span>

        <span class="token comment">//老师希望，可以调用Cat的 catchMouse方法</span>
        <span class="token comment">//多态的向下转型</span>
        <span class="token comment">//(1)语法：子类类型 引用名 =（子类类型）父类引用;</span>
        <span class="token comment">//问一个问题? cat 的编译类型 Cat,运行类型是 Cat</span>
        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>
        cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//猫抓老鼠</span>
        <span class="token comment">//(2)要求父类的引用必须指向的是当前目标类型的对象</span>
        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span> <span class="token comment">//可以吗？</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolyDetail02</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//属性没有重写之说！属性的值看编译类型</span>
        <span class="token class-name">Base</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上转型</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ？ 看编译类型 10</span>
        <span class="token class-name">Sub</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//?  20</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span> <span class="token comment">//父类</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//属性</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span><span class="token comment">//子类</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//属性</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolyDetail03</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BB</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bb <span class="token keyword">instanceof</span>  <span class="token class-name">BB</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bb <span class="token keyword">instanceof</span>  <span class="token class-name">AA</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>

        <span class="token comment">//aa 编译类型 AA, 运行类型是BB</span>
        <span class="token comment">//BB是AA子类</span>
        <span class="token class-name">AA</span> aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aa <span class="token keyword">instanceof</span> <span class="token class-name">AA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aa <span class="token keyword">instanceof</span> <span class="token class-name">BB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">AA</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
        <span class="token comment">//System.out.println(str instanceof AA);</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//父类</span>
<span class="token keyword">class</span> <span class="token class-name">BB</span> <span class="token keyword">extends</span> <span class="token class-name">AA</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//子类</span></code></pre></li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="7-5-2-动态绑定机制⭐️⭐️"><a href="#7-5-2-动态绑定机制⭐️⭐️" class="headerlink" title="7.5.2 动态绑定机制⭐️⭐️"></a>7.5.2 动态绑定机制⭐️⭐️</h3><ul>
<li><p>当调用对象方法的时候，该方法会和该对象的内存地址/<strong>运行类型</strong>绑定</p>
</li>
<li><p>当调用对象属性时，没有动态綁定机制，哪里声明，那里使用()</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicBinding</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//当子类不存在sum方法时，会从父类找到sum方法，但动态绑定机制会找到子类的getI返回i值</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ul>
<h3 id="7-5-3-多态的应用"><a href="#7-5-3-多态的应用" class="headerlink" title="7.5.3 多态的应用"></a>7.5.3 多态的应用</h3><ul>
<li><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><ol>
<li>多态数组：定义类型为父类类型，里面保存的实际元素类型为子类类型</li>
<li>多态参数：方法定义的形参类型为父类类型，实参类型允许为子类类型</li>
</ol>
</li>
</ul>
<h2 id="7-6-Super"><a href="#7-6-Super" class="headerlink" title="7.6  Super"></a>7.6  Super</h2><ul>
<li><h4 id="基本介绍：-4"><a href="#基本介绍：-4" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>super代表父类的引用，用于访问父类的属性、方法、构造器</p>
</li>
<li><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><ol>
<li>访问父类的属性，但不能访问父类的private属性<br>super.属性名;</li>
<li>访问父类的方法，不能访问父类的private方法<br>super.方法名(参数列表);</li>
<li>访问父类的构造器(只能放在构造器的第一句，只能出现一句)<br>super(参数列表);</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-4"><a href="#注意事项和细节：-4" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>调用父类的构造器的好处 (分工明确，父类属性由父类初始化，子类的属性由子类初始化)</li>
<li>当子类中有和父类中的成员(属性和方法) 重名时，为了访问父类的成员，必须通过super，如果没有重名，使用super、this、 直接访问效果相同</li>
<li>super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访问爷爷类的成员；如果多个基类(上级类)中都有同名的成员，使用super访问遵循就近原则</li>
</ol>
</li>
<li><h4 id="super和this"><a href="#super和this" class="headerlink" title="super和this"></a>super和this</h4><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/7-3.jpg"></p>
</li>
<li><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span> <span class="token comment">//父类是Object</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base类的cal() 方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base类的eat()....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//4个属性</span>
    <span class="token comment">//public int n1 = 100;</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n4 <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">//    public void cal() &#123;</span>
<span class="token comment">//        System.out.println("A类的cal() 方法...");</span>
<span class="token comment">//    &#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">test300</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test400</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span>

    <span class="token comment">//编写测试方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访问爷爷类的成员；</span>
        <span class="token comment">// 如果多个基类(上级类)中都有同名的成员，使用super访问遵循就近原则。A->B->C</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"super.n1="</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//访问父类的属性 , 但不能访问父类的private属性 [案例]super.属性名</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>n1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>n2 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>n3 <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类的cal() 方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类的sum()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//希望调用父类-A 的cal方法</span>
        <span class="token comment">//这时，因为子类B没有cal方法，因此我可以使用下面三种方式</span>

        <span class="token comment">//找cal方法时(cal() 和 this.cal())，顺序是:</span>
        <span class="token comment">// (1)先找本类，如果有，则调用</span>
        <span class="token comment">// (2)如果没有，则找父类(如果有，并可以调用，则调用)</span>
        <span class="token comment">// (3)如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object类</span>
        <span class="token comment">// 提示：如果查找方法的过程中，找到了，但是不能访问， 则报错, cannot access</span>
        <span class="token comment">//      如果查找方法的过程中，没有找到，则提示方法不存在</span>
        <span class="token comment">//cal();</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等价 cal</span>

        <span class="token comment">//找cal方法(super.call()) 的顺序是直接查找父类，其他的规则一样</span>
        <span class="token comment">//super.cal();</span>

        <span class="token comment">//演示访问属性的规则</span>
        <span class="token comment">//n1 和 this.n1 查找的规则是</span>
        <span class="token comment">//(1) 先找本类，如果有，则调用</span>
        <span class="token comment">//(2) 如果没有，则找父类(如果有，并可以调用，则调用)</span>
        <span class="token comment">//(3) 如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object类</span>
        <span class="token comment">// 提示：如果查找属性的过程中，找到了，但是不能访问， 则报错, cannot access</span>
        <span class="token comment">//      如果查找属性的过程中，没有找到，则提示属性不存在</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//找n1 (super.n1) 的顺序是直接查找父类属性，其他的规则一样</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token comment">//访问父类的方法，不能访问父类的private方法 super.方法名(参数列表);</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">test300</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//super.test400();//不能访问父类private方法</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//访问父类的构造器(这点前面用过)：super(参数列表);只能放在构造器的第一句，只能出现一句！</span>
    <span class="token keyword">public</span>  <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//super();</span>
        <span class="token comment">//super("jack", 10);</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ul>
<h2 id="7-7方法重写-overwrite"><a href="#7-7方法重写-overwrite" class="headerlink" title="7.7方法重写(overwrite)"></a>7.7方法重写(overwrite)</h2><ul>
<li><h4 id="基本介绍：-5"><a href="#基本介绍：-5" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>子类的方法和父类方法一致，那么子类的方法覆盖了父类的方法</p>
</li>
<li><h4 id="注意事项和细节：-5"><a href="#注意事项和细节：-5" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>子类的方法的形参列表,方法名称，要和父类方法的形参列表,方法名称完全一样</li>
<li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类</li>
<li>子类方法大于等于父类方法的访问权限</li>
</ol>
</li>
</ul>
<h2 id="7-8-Object类"><a href="#7-8-Object类" class="headerlink" title="7.8  Object类"></a>7.8  Object类</h2><ul>
<li><h4 id><a href="#" class="headerlink" title="=="></a>==</h4><ol>
<li><p>既可以判断基本类型，又可以判断引用类型</p>
</li>
<li><p>如果判断基本类型，判断的是值是否相等</p>
</li>
<li><p>如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Equals01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">A</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token class-name">A</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">B</span> bObj <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bObj <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
<li><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><ol>
<li>equals:是Object类中的方法，只能判断引用类型</li>
<li>默认判断的是地址是否相等，子类中往往重写该方法，用于判断<strong>内容</strong>是否相等</li>
</ol>
</li>
<li><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h4><ol>
<li>提高具有哈希结构的容器的效率</li>
<li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的</li>
<li>两个引用，如果指向的是不同对象，则哈希值是不一样的</li>
<li>哈希值主要根据地址号来的，不能完全将哈希值等价子地址</li>
<li>后面在集合中hashCode 如果需要的话，也会重写</li>
</ol>
</li>
<li><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><ol>
<li>默认返回：全类名＋@+哈希值的十六进制</li>
<li>子类往往重写to String方法，用于返回对象的属性信息</li>
<li>重写toString方法，打印对象或拼接对象时，都会自动调用该对象的toString形式</li>
<li>当直接输出一个对象时，toString 方法会被默认的调用</li>
</ol>
</li>
<li><h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h4><ol>
<li>当对象被回收时，系统自动调用该对象的finalize方法。子类可以重写该方法，做一些释放资源的操作</li>
<li>什么时候被回收：当某个对象没有任何引用时，则jvm就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用finalize方法</li>
<li>垃圾回收机制的调用，是由系统来決定(即有自己的GC算法)，也可以通过System.gc() 主动触发垃圾回收机制</li>
</ol>
</li>
</ul>
<h2 id="7-9断点调试"><a href="#7-9断点调试" class="headerlink" title="7.9断点调试"></a>7.9断点调试</h2><ul>
<li><h4 id="基本介绍：-6"><a href="#基本介绍：-6" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。进行分析从而找到这个Bug</p>
</li>
<li><h4 id="注意事项和细节：-6"><a href="#注意事项和细节：-6" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>在断点调试 过程中，是运行状态，是以对象的运行类型来执行的</li>
<li>F7：跳入方法内</li>
<li>F8：逐行执行代码<br>shift+F8:跳出方法</li>
<li>F9：resume，执行到下一个断点</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>8.面向对象(高级)</title>
    <url>/2022/06/25/8-mian-xiang-dui-xiang-gao-ji/</url>
    <content><![CDATA[<h1 id="8-面向对象-高级"><a href="#8-面向对象-高级" class="headerlink" title="8 面向对象(高级)"></a>8 面向对象(高级)</h1><h2 id="8-1类变量和类方法⭐️"><a href="#8-1类变量和类方法⭐️" class="headerlink" title="8.1类变量和类方法⭐️"></a>8.1类变量和类方法⭐️</h2><h3 id="8-1-1类变量"><a href="#8-1-1类变量" class="headerlink" title="8.1.1类变量"></a>8.1.1类变量</h3><ul>
<li><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>类变量也叫静态变量/静态属性，是该类的所有对象共享的变量,任何一个该类的对象去访问它时,取到的都是相同的值,同样任何一个该类的对象去修改它时,修改的也是同一个变量</p>
</li>
<li><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java">访问修饰符 <span class="token keyword">static</span> 数据类型 变量名<span class="token punctuation">;</span>
<span class="token keyword">static</span> 访问修饰符 数据类型 变量名<span class="token punctuation">;</span></code></pre></li>
<li><h4 id="如何访问类变量："><a href="#如何访问类变量：" class="headerlink" title="如何访问类变量："></a>如何访问类变量：</h4><ol>
<li>类名.类变量名</li>
<li>对象名.类变量名</li>
<li>静态变量的访问修饰符的访问权限和范围和普通属性是一样的</li>
</ol>
</li>
<li><h4 id="内存布局："><a href="#内存布局：" class="headerlink" title="内存布局："></a>内存布局：</h4></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/8-1.jpg">  </p>
<ul>
<li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量(静态变量)</li>
<li>类变量是该类的所有对象共享的，而实例变量是每个对象独享的</li>
<li>加上static称为类变量或静态变量，否则称为实例变量/普通变量/非静态变量</li>
<li>类变量可以通过 类名.类变量名 或者 对象名.类变量名 来访问</li>
<li>实例变量不能通过 类名.类变量名 方式访问</li>
<li>类变量是在类加载时就初始化</li>
<li>类变量的生命周期是随类的加载开始，随着类消亡而销毁</li>
</ol>
</li>
</ul>
<h3 id="8-1-2类方法"><a href="#8-1-2类方法" class="headerlink" title="8.1.2类方法"></a>8.1.2类方法</h3><ul>
<li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>类方法也叫静态方法</p>
</li>
<li><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java">访问修饰符 <span class="token keyword">static</span> 数据返回类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> 访问修饰符 数据返回类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li>
<li><h4 id="类方法调用："><a href="#类方法调用：" class="headerlink" title="类方法调用："></a>类方法调用：</h4><ol>
<li>类名.类方法名</li>
<li>对象名.类方法名</li>
<li> 满足访问修饰符的访向权限和范围</li>
</ol>
</li>
<li><h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ol>
<li>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法,提高开发效率</li>
<li>程序员实际开发，往往会将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区：<br>类方法中无this的参数，普通方法中隐含着this的参数</li>
<li>类方法可以通过类名调用，也可以通过对象名调用</li>
<li>音通方法和对象有关，需要通过对象名调用，比如对象名.方法名(参数)，不能通过类名调用</li>
<li>类方法中不允许使用和对象有关的关键字，比如this和super</li>
<li><strong>静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员</strong></li>
</ol>
</li>
</ul>
<h2 id="8-2-main方法"><a href="#8-2-main方法" class="headerlink" title="8.2  main方法"></a>8.2  main方法</h2><ul>
<li><h4 id="深入理解main方法："><a href="#深入理解main方法：" class="headerlink" title="深入理解main方法："></a>深入理解main方法：</h4><ol>
<li>java虛拟机需要调用类的main0方法，所以该方法的访问权限化须是public</li>
<li>java虚拟机在执行main0方法时不必创建对象，所以该方法心须是static</li>
<li>该方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</li>
<li>java 执行的程序 参数1 参数2 参数3</li>
</ol>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/8-2.jpg"></p>
<ul>
<li><h4 id="注意事项和细节：-2"><a href="#注意事项和细节：-2" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>在main()方法中，我们可以直接调用main方法所在类的静态方法或静态属性</li>
<li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的目静态成员</li>
</ol>
</li>
</ul>
<h2 id="8-3代码块"><a href="#8-3代码块" class="headerlink" title="8.3代码块"></a>8.3代码块</h2><ul>
<li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>代码化块又称为初始化块,属于类中的成员，类似于方法，将逻辑语句封装在方法体中，通过们包围起来。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用</p>
</li>
<li><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
  代码<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><ol>
<li>修饰符 可选，要写的话，也只能写 static</li>
<li>代码块分为两类，使用static 修饰的叫静态代码块，没有static修饰的，叫普通代码块</li>
<li>逻辑语句可以为任何逻辑语句</li>
<li>：号可以写上，也可以省略</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-3"><a href="#注意事项和细节：-3" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>static代码块是类加载时执行，且只会执行一次</li>
<li>普通代码块是在创建对象的调用的，创建一次，调用一次</li>
<li>类什么时候被加载⭐️⭐️：<ul>
<li>创建对象实例时</li>
<li>创建子类对象实例时，父类也会被加载</li>
<li>使用类的静态成员时</li>
</ul>
</li>
<li>创建一个<strong>对象</strong>时，在一个类的调用<strong>顺序</strong>：<ul>
<li>调用静态代码块和静态属性初始化(注意：静态代码块和静态属性初始化调用的优先级样，如果有多个静态代码块和多个静<br>态变量初始化，则按他们定义的顺序调</li>
<li>调用普通代码块和普通属性的初始化(注意：普通代码块和普通属性初始化调用的优先级一样，若果有多个普通代码块和stat多个普通属性初始化，则按定义顺序调用)</li>
<li>调用构造器</li>
</ul>
</li>
<li>构造方法(构造器)的最前面其实隐含了 super()和调用普通代码块</li>
<li><strong>创建子类时顺序</strong>⭐️⭐️：<ul>
<li>父类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li>
<li>子类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li>
<li>父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li>
<li>父类构造方法</li>
<li>子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li>
<li>子类构造方法</li>
</ul>
</li>
<li>静态代码块只能直接调用静态成员(静态属性和静态方法)，普通代码块可以调用任意成员</li>
</ol>
</li>
</ul>
<h2 id="8-4单例设计模式"><a href="#8-4单例设计模式" class="headerlink" title="8.4单例设计模式"></a>8.4单例设计模式</h2><ul>
<li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</p>
<p>单例模式有两种方式：1. 饿汉式  2.懒汉式</p>
</li>
<li><h4 id="饿汉式："><a href="#饿汉式：" class="headerlink" title="饿汉式："></a>饿汉式：</h4><ol>
<li><p>构造器私有化</p>
</li>
<li><p>类的内部创建静态对象</p>
</li>
<li><p>向外暴露一个静态公共方法</p>
</li>
<li><p>特点：在类加载的时候就创建对象实例，可能存在资源浪费</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> gf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> gf<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
<li><h4 id="懒汉式："><a href="#懒汉式：" class="headerlink" title="懒汉式："></a>懒汉式：</h4><ol>
<li><p>构造器私有化</p>
</li>
<li><p>定义一个static静态属性对象</p>
</li>
<li><p>提供一个public的static方法，返回一个对象</p>
</li>
<li><p>只有当使用(3)的方法时，才返回对象，再次调用时，返回上次创建的对象</p>
</li>
<li><p>特点：线程安全问题</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Cat</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cat <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
<li><h4 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h4><ol>
<li>最主要的区别在于创建对象的时机不同：饿汉式是在类加载就创建了对象实例，而懒汉式是在使用时才创建</li>
<li>饿汉式不存在线程安全问题，徽汉式存在线程安全问题</li>
<li>饿汉式存在浪费姿源的可能，对象实例都没有使用，那么饿汉式创建的对象就浪费，懒汉式是使用时才创建，就不存在这个问题</li>
</ol>
</li>
</ul>
<h2 id="8-5-final"><a href="#8-5-final" class="headerlink" title="8.5  final"></a>8.5  final</h2><ul>
<li><h4 id="基本介绍：-4"><a href="#基本介绍：-4" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>final可以修饰类、属性、方法、局部变量</p>
</li>
<li><p>final 类，类不能被继承</p>
</li>
<li><p>final 方法，子类无法重写方法</p>
</li>
<li><p>final 属性，属性无法被修改</p>
</li>
<li><p>final 局部变量，局部变量无法被修改</p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-4"><a href="#注意事项和细节：-4" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>final修饰的属性又叫常量，一般用XX_XX_XX 来命名</li>
<li>final<strong>修饰的属性在定义时</strong>,必须赋初值,并且以后不能再修改，赋值可以在如下位置：<br><strong>定义时、构造器、代码块</strong></li>
<li>final修饰的属性是静态的，则初始化的位置只能是 定义时、静态代码块</li>
<li>final类不能继承，但可以实例化对象</li>
<li>如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</li>
<li>如果一个类已经是final类了，就没有必要再将方法修饰成final方法</li>
<li>final不能修饰构造器本身</li>
<li>final 和static 往往搭配使用，效率更高，不会导致类加载-底层编译器做了优化处理</li>
<li>包装类(Integer, Double,Float,Boolean等都是final)，String也是final类</li>
</ol>
</li>
</ul>
<h2 id="8-6抽象类"><a href="#8-6抽象类" class="headerlink" title="8.6抽象类"></a>8.6抽象类</h2><ul>
<li><h4 id="基本介绍：-5"><a href="#基本介绍：-5" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>用abstract 关键字来修饰一个类时,这个类就叫抽象类</p>
</li>
<li><p>用abstract 关键字来修饰一个方法时,这个方法就是抽象方法，没有方法体</p>
</li>
<li><p>抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类</p>
</li>
</ul>
</li>
<li><h4 id="注意事项和细节：-5"><a href="#注意事项和细节：-5" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>抽象类不能被实例化</li>
<li>抽象类不一定要包含abstract方法。也就是说,抽象类可以没有abstract方法</li>
<li>一旦类包含了abstract方法,则这个类必须声明为abstract</li>
<li>abstract 只能修饰类和方法</li>
<li>抽象类可以有任意成员，抽象类本质还是类</li>
<li>抽象方法不能有主体</li>
<li>如果一个类继承了抽象类，则它必须实现抽象类的所有的抽象方法，除非它自己也声明为abstract类</li>
<li>抽象方法不能使用private、final 和static来修饰，因为这些关键字都是和重写相违背的</li>
</ol>
</li>
<li><h4 id="抽象类模版设计模式"><a href="#抽象类模版设计模式" class="headerlink" title="抽象类模版设计模式"></a>抽象类模版设计模式</h4><ol>
<li>编写方法cal()，可以计算某段代码的耗时时间</li>
<li>编写抽象方法job()</li>
<li>编写一个子类A,继承抽象类Template，井实现job方法</li>
<li>编写一个测试类TestTemplate,看看是否好用</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextTemplate</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Template</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"时间"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            num <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            num <span class="token operator">*=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ul>
<h2 id="8-7接口⭐️"><a href="#8-7接口⭐️" class="headerlink" title="8.7接口⭐️"></a>8.7接口⭐️</h2><ul>
<li><h4 id="基本介绍：-6"><a href="#基本介绍：-6" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,再根据具体情况把这些方法写出来</p>
</li>
<li><h4 id="基本语法：-3"><a href="#基本语法：-3" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> 接口名<span class="token punctuation">&#123;</span>
  <span class="token comment">//属性</span>
  <span class="token comment">//方法</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口 <span class="token punctuation">&#123;</span>
  自己属性<span class="token punctuation">;</span>
  自己方法<span class="token punctuation">;</span>
  <span class="token comment">//必须实现接口的抽象方法</span>
<span class="token punctuation">&#125;</span></code></pre>

<ol>
<li>Jdk7.0前 接口里的所有方法都没有方法体(只能<strong>抽象方法</strong>)</li>
<li>Jdk8.0后接口类可以有<strong>静态方法，defaut实现方法</strong>，也就是说接口中可以有方法的具体实现</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-6"><a href="#注意事项和细节：-6" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>接口不能被实例化</li>
<li>接口中所有的方法是 public 和 abstrac 方法，接口中抽象方法，可以不用 abstract 修饰</li>
<li>普通类实现接口，就必须将该接口的所有方法实现</li>
<li><strong>抽象类实现接口，可以不用实现接口的方法</strong></li>
<li>一个类同时可以实现多个接口</li>
<li>接口中的属性,只能是 final 的，而且是 public static final 修饰符</li>
<li>接口中属性的访问形式：接口名.属性名</li>
<li>一个接口不能继承其它的类,但是可以继承多个别的接口</li>
<li>接口的修饰符 只能是 public 和默认，这点和类的修饰符是一样的</li>
</ol>
</li>
<li><h4 id="实现接口VS继承类："><a href="#实现接口VS继承类：" class="headerlink" title="实现接口VS继承类："></a>实现接口VS继承类：</h4><ol>
<li>继承的价值主要在于：解决代码的复用性和可维护性</li>
<li>接口的价值主要在于：设计，设计好各种规范(方法)，让其它类去实现这些方法</li>
<li>接口比继承更加灵活，继承是满足 is -a的关系，而接口只需满足 like-a的关系</li>
<li>接口在一定程度上实现代码解耦</li>
</ol>
</li>
<li><h4 id="接口类型数组："><a href="#接口类型数组：" class="headerlink" title="接口类型数组："></a>接口类型数组：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfacePolyArr</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">//多态数组 -> 接口类型数组</span>
        <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token punctuation">]</span> usbs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        usbs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        usbs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camera_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
        给Usb数组中，存放 Phone 和 相机对象，Phone类还有一个特有的方法call（），
        请遍历Usb数组，如果是Phone对象，除了调用Usb 接口定义的方法外，
        还需要调用Phone 特有方法 call
         */</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            usbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态绑定..</span>
            <span class="token comment">//和前面一样，我们仍然需要进行类型的向下转型</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>usbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Phone_</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断他的运行类型是 Phone_</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Phone_</span><span class="token punctuation">)</span> usbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Usb</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Phone_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机可以打电话..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Camera_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre></li>
</ul>
<h2 id="8-8内部类⭐️"><a href="#8-8内部类⭐️" class="headerlink" title="8.8内部类⭐️"></a>8.8内部类⭐️</h2><ul>
<li><h4 id="基本介绍：-7"><a href="#基本介绍：-7" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li>一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类(inner class)，嵌套其他类的类称为外部类(outer class)</li>
<li>内部类最大的特点就是可以直接访问私有属性，井且可以体现类与类之间的包含关系</li>
</ul>
</li>
<li><h4 id="基本语法：-4"><a href="#基本语法：-4" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span><span class="token comment">//外部类</span>
  <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span><span class="token comment">//内部类</span>
    
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Other</span><span class="token punctuation">&#123;</span><span class="token comment">//外部其他类</span>
  
<span class="token punctuation">&#125;</span></code></pre></li>
<li><h4 id="内部类分类："><a href="#内部类分类：" class="headerlink" title="内部类分类："></a>内部类分类：</h4><ol>
<li>定义在外部类局部位置上：1局部类内部(有类名) 2.匿名局部类(没有类名⭐️)</li>
<li>定义在外部类的成员位置上：1.成员内部类(无static修饰) 2.静态内部类(static修饰)</li>
</ol>
</li>
</ul>
<h3 id="8-8-1局部内部类"><a href="#8-8-1局部内部类" class="headerlink" title="8.8.1局部内部类"></a>8.8.1局部内部类</h3><ul>
<li><h4 id="基本介绍：-8"><a href="#基本介绍：-8" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>局部内部类是定义在外部类的局部位置，在方法中、代码块中，并且有类名</p>
</li>
<li><h4 id="注意事项和细节：-7"><a href="#注意事项和细节：-7" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>可以直接访问外部类的所有成员，包含私有的</p>
</li>
<li><p>不能添加访问修饰符,但是可以使用final修饰</p>
</li>
<li><p>作用域：仅仅在定义它的方法或代码块中</p>
</li>
<li><p>内部类访问外部类：直接访问</p>
</li>
<li><p>外部类访问内部类：创建对象再访问</p>
</li>
<li><p>外部其他类访问局部内部类：不能访问</p>
</li>
<li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果访问外部类的成员使用”外部类名.this.成员”去访问</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalInnerClass</span> <span class="token punctuation">&#123;</span><span class="token comment">//</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//演示一遍</span>
        <span class="token class-name">Outer02</span> outer02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outer02<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"outer02的hashcode="</span> <span class="token operator">+</span> outer02<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">Outer02</span> <span class="token punctuation">&#123;</span><span class="token comment">//外部类</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Outer02 m2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token comment">//私有方法</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//方法</span>
        <span class="token comment">//1.局部内部类是定义在外部类的局部位置,通常在方法</span>
        <span class="token comment">//3.不能添加访问修饰符,但是可以使用final 修饰</span>
        <span class="token comment">//4.作用域 : 仅仅在定义它的方法或代码块中</span>
        <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Inner02</span> <span class="token punctuation">&#123;</span><span class="token comment">//局部内部类(本质仍然是一个类)</span>
            <span class="token comment">//2.可以直接访问外部类的所有成员，包含私有的</span>
            <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span>

            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//5. 局部内部类可以直接访问外部类的成员，比如下面 外部类n1 和 m2()</span>
                <span class="token comment">//7. 如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，</span>
                <span class="token comment">//   使用 外部类名.this.成员)去访问</span>
                <span class="token comment">//    Outer02.this 本质就是外部类的对象, 即哪个对象调用了m1, Outer02.this就是哪个对象</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">" 外部类的n1="</span> <span class="token operator">+</span> <span class="token class-name">Outer02</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Outer02.this hashcode="</span> <span class="token operator">+</span> <span class="token class-name">Outer02</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//6. 外部类在方法中，可以创建Inner02对象，然后调用方法即可</span>
        <span class="token class-name">Inner02</span> inner02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner02<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
</ul>
<h3 id="8-8-2匿名内部类⭐️⭐️"><a href="#8-8-2匿名内部类⭐️⭐️" class="headerlink" title="8.8.2匿名内部类⭐️⭐️"></a>8.8.2匿名内部类⭐️⭐️</h3><ul>
<li><h4 id="基本介绍：-9"><a href="#基本介绍：-9" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>匿名内部类是定义在外部类的局部位置，比如方法中，并目没有类名，同时还是一个对象</p>
</li>
<li><h4 id="基本语法：-5"><a href="#基本语法：-5" class="headerlink" title="基本语法："></a>基本语法：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 类或接口<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  类体<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li>
<li><h4 id="底层："><a href="#底层：" class="headerlink" title="底层："></a>底层：</h4><ol>
<li>本质： <strong>IA tiger</strong> = class Xxxx$1      class Xxxx$1 = <strong>new IA</strong> </li>
<li>接口的底层：class Xxxx$1 <strong>implement</strong> IA{@Overide}</li>
<li>本质： <strong>Father father</strong> = class Xxxx$2      class Xxxx$2 = <strong>new Father</strong> </li>
<li>类的底层：class Xxxx$2 <strong>extends</strong> Father{@Overide}</li>
</ol>
</li>
<li><h4 id="注意事项和细节：-8"><a href="#注意事项和细节：-8" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>匿名内部类既是一个类的定义同时本身也是一个对象,因此从语法上看，它既有定义类的特征，也有创建对象的特征</p>
</li>
<li><p>可以直接访问外部类的所有成员，包含私有的</p>
</li>
<li><p>不能添加访问修饰符,因为它的地位就是一个局部变量</p>
</li>
<li><p>作用域：仅仅在定义它的方法或代码块中</p>
</li>
<li><p>匿名内部类方位外部类成员：直接访问</p>
</li>
<li><p>外部其他类访问匿名内部类：不能访问</p>
</li>
<li><p>如果外部类和匿名内部类的成员重名时，匿名内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousInnerClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Outer04</span> outer04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outer04<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Outer04</span> <span class="token punctuation">&#123;</span> <span class="token comment">//外部类</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//属性</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//方法</span>
        <span class="token comment">//基于接口的匿名内部类</span>
        <span class="token comment">//</span>
        <span class="token comment">//1.需求： 想使用IA接口,并创建对象</span>
        <span class="token comment">//2.传统方式，是写一个类，实现该接口，并创建对象</span>
        <span class="token comment">//3.需求是 Tiger/Dog 类只是使用一次，后面再不使用</span>
        <span class="token comment">//4. 可以使用匿名内部类来简化开发</span>
        <span class="token comment">//5. tiger的编译类型 ? IA</span>
        <span class="token comment">//6. tiger的运行类型 ? 就是匿名内部类  Outer04$1</span>
        <span class="token comment">/*
            我们看底层 会分配 类名 Outer04$1
            class Outer04$1 implements IA &#123;
                @Override
                public void cry() &#123;
                    System.out.println("老虎叫唤...");
                &#125;
            &#125;
         */</span>
        <span class="token comment">//7. jdk底层在创建匿名内部类 Outer04$1,立即马上就创建了 Outer04$1实例，并且把地址</span>
        <span class="token comment">//   返回给 tiger</span>
        <span class="token comment">//8. 匿名内部类使用一次，就不能再使用</span>
        <span class="token class-name">IA</span> tiger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老虎叫唤..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tiger的运行类型="</span> <span class="token operator">+</span> tiger<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tiger<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        IA tiger = new Tiger();</span>
<span class="token comment">//        tiger.cry();</span>

        <span class="token comment">//演示基于类的匿名内部类</span>
        <span class="token comment">//分析</span>
        <span class="token comment">//1. father编译类型 Father</span>
        <span class="token comment">//2. father运行类型 Outer04$2</span>
        <span class="token comment">//3. 底层会创建匿名内部类</span>
        <span class="token comment">/*
            class Outer04$2 extends Father&#123;
                @Override
                public void test() &#123;
                    System.out.println("匿名内部类重写了test方法");
                &#125;
            &#125;
         */</span>
        <span class="token comment">//4. 同时也直接返回了 匿名内部类 Outer04$2的对象</span>
        <span class="token comment">//5. 注意("jack") 参数列表会传递给 构造器</span>
        <span class="token class-name">Father</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写了test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father对象的运行类型="</span> <span class="token operator">+</span> father<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Outer04$2</span>
        father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//基于抽象类的匿名内部类</span>
        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗吃骨头..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">IA</span> <span class="token punctuation">&#123;</span><span class="token comment">//接口</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//class Tiger implements IA &#123;</span>
<span class="token comment">//</span>
<span class="token comment">//    @Override</span>
<span class="token comment">//    public void cry() &#123;</span>
<span class="token comment">//        System.out.println("老虎叫唤...");</span>
<span class="token comment">//    &#125;</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//class Dog implements  IA&#123;</span>
<span class="token comment">//    @Override</span>
<span class="token comment">//    public void cry() &#123;</span>
<span class="token comment">//        System.out.println("小狗汪汪...");</span>
<span class="token comment">//    &#125;</span>
<span class="token comment">//&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span><span class="token comment">//类</span>
    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//构造器</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//方法</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span> <span class="token comment">//抽象类</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalInnerClassDetail</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Outer03</span> outer03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outer03<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Outer03</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写hi方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        person<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写ok方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person hi()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person ok()"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassExercise02</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CellPhone</span> cellPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CellPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cellPhone<span class="token punctuation">.</span><span class="token function">alarmclock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒猪起床"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Bell</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">CellPhone</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alarmClock</span><span class="token punctuation">(</span><span class="token class-name">Bell</span> bell<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        bell<span class="token punctuation">.</span><span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
</ul>
<h3 id="8-8-3成员内部类"><a href="#8-8-3成员内部类" class="headerlink" title="8.8.3成员内部类"></a>8.8.3成员内部类</h3><ul>
<li><h4 id="基本介绍：-10"><a href="#基本介绍：-10" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>成员内部类是定义在外部类的成员位置，并且没有static修饰</p>
</li>
<li><h4 id="注意事项和细节：-9"><a href="#注意事项和细节：-9" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>可以直接访问外部类的所有成员，包含私有的</p>
</li>
<li><p>可以添加任意访问修饰符</p>
</li>
<li><p>作用域：为整个外部类类体</p>
</li>
<li><p>成员内部类访问外部类：直接访问</p>
</li>
<li><p>外部类访问成员内部类；创建对象，再访问</p>
</li>
<li><p>外部其他类访问成员内部类：</p>
<ul>
<li><p>外部类.内部类  引用名 = 外部对象.new 内部类();</p>
</li>
<li><p>外部类.内部类  引用名 = <strong>外部对象</strong>.get();</p>
<!--需要创建外部类对象实例，get()为内部类返回对象的方法--></li>
</ul>
</li>
<li><p>如果外部类和成员内部类的成员重名时，成员内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberInnerClass01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Outer08</span> outer08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outer08<span class="token punctuation">.</span><span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//外部其他类，使用成员内部类的三种方式</span>
        <span class="token comment">//</span>
        <span class="token comment">// 第一种方式</span>
        <span class="token comment">// outer08.new Inner08(); 相当于把 new Inner08()当做是outer08成员</span>
        <span class="token comment">// 这就是一个语法，不要特别的纠结.</span>
        <span class="token class-name">Outer08<span class="token punctuation">.</span>Inner08</span> inner08 <span class="token operator">=</span> outer08<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner08<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第二方式 在外部类中，编写一个方法，可以返回 Inner08对象</span>
        <span class="token class-name">Outer08<span class="token punctuation">.</span>Inner08</span> inner08Instance <span class="token operator">=</span> outer08<span class="token punctuation">.</span><span class="token function">getInner08Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner08Instance<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Outer08</span> <span class="token punctuation">&#123;</span> <span class="token comment">//外部类</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi()方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//1.注意: 成员内部类，是定义在外部内的成员位置上</span>
    <span class="token comment">//2.可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner08</span> <span class="token punctuation">&#123;</span><span class="token comment">//成员内部类</span>
        <span class="token keyword">private</span> <span class="token keyword">double</span> sal <span class="token operator">=</span> <span class="token number">99.8</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//可以直接访问外部类的所有成员，包含私有的</span>
            <span class="token comment">//如果成员内部类的成员和外部类的成员重名，会遵守就近原则.</span>
            <span class="token comment">//，可以通过  外部类名.this.属性 来访问外部类的成员</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1 = "</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">" name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" 外部类的n1="</span> <span class="token operator">+</span> <span class="token class-name">Outer08</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//方法，返回一个Inner08实例</span>
    <span class="token keyword">public</span> <span class="token class-name">Inner08</span> <span class="token function">getInner08Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//写方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//使用成员内部类</span>
        <span class="token comment">//创建成员内部类的对象，然后使用相关的方法</span>
        <span class="token class-name">Inner08</span> inner08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner08<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inner08<span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
</ul>
<h3 id="8-8-4静态内部类"><a href="#8-8-4静态内部类" class="headerlink" title="8.8.4静态内部类"></a>8.8.4静态内部类</h3><ul>
<li><h4 id="基本介绍：-11"><a href="#基本介绍：-11" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>静态内部类是定义在外部类的成员位置，并且有static修饰</p>
</li>
<li><h4 id="注意事项和细节：-10"><a href="#注意事项和细节：-10" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</p>
</li>
<li><p>可以添加任意访问修饰符</p>
</li>
<li><p>作用域：整个外部类类体</p>
</li>
<li><p>静态内部类访问外部类：直接访问</p>
</li>
<li><p>外部类访问静态内部类：创建对象，再访问</p>
</li>
<li><p>外部其他类访问静态内部类：</p>
<ul>
<li><p>外部类.内部类  引用名 = new 外部类.内部类();</p>
</li>
<li><p>外部类.内部类  引用名 = <strong>外部对象</strong>.get();</p>
<!--需要创建外部类对象实例，get()为内部类返回对象的方法--></li>
<li><p>外部类.内部类  引用名 = <strong>外部类</strong>.get();</p>
<!--不需要创建外部类对象实例--></li>
</ul>
</li>
<li><p>如果外部类和静态内部类的成员重名时，静态内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Outer10</span> outer10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outer10<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//外部其他类 使用静态内部类</span>
        <span class="token comment">//方式1</span>
        <span class="token comment">//因为静态内部类，是可以通过类名直接访问(前提是满足访问权限)</span>
        <span class="token class-name">Outer10<span class="token punctuation">.</span>Inner10</span> inner10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer10<span class="token punctuation">.</span>Inner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner10<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//方式2</span>
        <span class="token comment">//编写一个方法，可以返回静态内部类的对象实例.</span>
        <span class="token class-name">Outer10<span class="token punctuation">.</span>Inner10</span> inner101 <span class="token operator">=</span> outer10<span class="token punctuation">.</span><span class="token function">getInner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner101<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Outer10<span class="token punctuation">.</span>Inner10</span> inner10_ <span class="token operator">=</span> <span class="token class-name">Outer10</span><span class="token punctuation">.</span><span class="token function">getInner10_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner10_<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Outer10</span> <span class="token punctuation">&#123;</span> <span class="token comment">//外部类</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token comment">//Inner10就是静态内部类</span>
    <span class="token comment">//1. 放在外部类的成员位置</span>
    <span class="token comment">//2. 使用static 修饰</span>
    <span class="token comment">//3. 可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</span>
    <span class="token comment">//4. 可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span>
    <span class="token comment">//5. 作用域 ：同其他的成员，为整个类体</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner10</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"韩顺平教育"</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//如果外部类和静态内部类的成员重名时，静态内部类访问的时，</span>
            <span class="token comment">//默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.成员)</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" 外部类name= "</span> <span class="token operator">+</span> <span class="token class-name">Outer10</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//外部类---访问------>静态内部类 访问方式：创建对象，再访问</span>
        <span class="token class-name">Inner10</span> inner10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inner10<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Inner10</span> <span class="token function">getInner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Inner10</span> <span class="token function">getInner10_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
</ul>
<h2 id="8-9类加载顺序⭐️⭐️"><a href="#8-9类加载顺序⭐️⭐️" class="headerlink" title="8.9类加载顺序⭐️⭐️"></a>8.9类加载顺序⭐️⭐️</h2><ul>
<li><h4 id="类什么时候被加载："><a href="#类什么时候被加载：" class="headerlink" title="类什么时候被加载："></a>类什么时候被加载：</h4><ul>
<li>创建对象实例时</li>
<li>创建子类对象实例时，父类也会被加载</li>
<li>使用类的静态成员时</li>
</ul>
</li>
<li><h4 id="创建一个对象时，在一个类的调用顺序："><a href="#创建一个对象时，在一个类的调用顺序：" class="headerlink" title="创建一个对象时，在一个类的调用顺序："></a>创建一个对象时，在一个类的调用<strong>顺序</strong>：</h4><ol>
<li><p>调用静态代码块和静态属性初始化(注意：静态代码块和静态属性初始化调用的优先级样，如果有多个静态代码块和多个静</p>
<p>态变量初始化，则按他们定义的顺序调</p>
</li>
<li><p>调用普通代码块和普通属性的初始化(注意：普通代码块和普通属性初始化调用的优先级一样，若果有多个普通代码块和多个普通属性初始化，则按定义顺序调用)</p>
</li>
<li><p>调用构造方法</p>
</li>
</ol>
</li>
<li><h4 id="创建子类时顺序："><a href="#创建子类时顺序：" class="headerlink" title="创建子类时顺序："></a>创建子类时顺序：</h4><ol>
<li>父类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li>
<li>子类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li>
<li>父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li>
<li>父类构造方法</li>
<li>子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li>
<li>子类构造方法</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>9.枚举和注解</title>
    <url>/2022/06/28/9-mei-ju-he-zhu-jie/</url>
    <content><![CDATA[<ul>
<li><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>枚举是一组常量的集合，属于一种特殊的类，里面只包含一组有限的特定的对象</p>
</li>
</ul>
<h2 id="9-1自定义类实现枚举"><a href="#9-1自定义类实现枚举" class="headerlink" title="9.1自定义类实现枚举"></a>9.1自定义类实现枚举</h2><ul>
<li><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol>
<li>构造器私有化</li>
<li>本类内部创建一组对象</li>
<li>对外暴露对象(通过为对象添加public final static修饰符)</li>
<li>提供get方法，但是不提供set方法</li>
</ol>
</li>
<li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li>不需要提供setxxx 方法，因为枚举对象值通常为只读</li>
<li>枚举对象/属性使用 final + static 共同修饰，实现底层优化</li>
<li>枚举对象名通常使用全部大写，常量的命名规范</li>
<li>枚举对象根据需要，也可以有多个属性</li>
</ol>
</li>
</ul>
<h2 id="9-2enum关键字实现枚举"><a href="#9-2enum关键字实现枚举" class="headerlink" title="9.2enum关键字实现枚举"></a>9.2enum关键字实现枚举</h2><ul>
<li><h4 id="实现步骤：-1"><a href="#实现步骤：-1" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol>
<li><p>关键字 enum 代替 class</p>
</li>
<li><p>行首：常量名(实参列表)</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">&#123;</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code></pre></li>
</ol>
</li>
<li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol>
<li><p>使用enum 关键字开发一个枚举类时，默认会继承Enum类</p>
</li>
<li><p>传统的 public static final Season SPRING = new Season(“春天””温暖”)；</p>
<p>简化成 SPRING(“春天”，”温暖”)，我们必须知道它调用的是哪个构造器</p>
</li>
<li><p>如果使用无参构造器 创建 枚举对象，则实参列表和小括号都可以省略</p>
</li>
<li><p>多个枚举对象，使用,间隔，最后;结尾</p>
</li>
<li><p>枚举对象必须放在枚举类行首</p>
</li>
</ol>
</li>
<li><h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><ul>
<li><p>toString：Enum类己经重写过了，返回的是当前对象名子类可以重写该方法，用于返回对象的属性信息</p>
</li>
<li><p>name：返回当前对象名(常量名)，子类中不能重写</p>
</li>
<li><p>ordinal：返回当前对象的位置号，默认从0开始</p>
</li>
<li><p>values：返回当前枚举类中所有的常量</p>
</li>
<li><p>valueof：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</p>
</li>
<li><p>compareTo：比较两个枚举常量的编号，做差</p>
</li>
</ul>
</li>
</ul>
  <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumMethod</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//使用Season2 枚举类，来演示各种方法</span>
        <span class="token class-name">Season2</span> autumn <span class="token operator">=</span> <span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">AUTUMN</span><span class="token punctuation">;</span>

        <span class="token comment">//输出枚举对象的名字</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>autumn<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//ordinal() 输出的是该枚举对象的次序/编号，从0开始编号</span>
        <span class="token comment">//AUTUMN 枚举对象是第三个，因此输出 2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>autumn<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//从反编译可以看出 values方法，返回 Season2[]</span>
        <span class="token comment">//含有定义的所有枚举对象</span>
        <span class="token class-name">Season2</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===遍历取出枚举对象(增强for)===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Season2</span> season<span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//增强for循环</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</span>
        <span class="token comment">//执行流程</span>
        <span class="token comment">//1. 根据你输入的 "AUTUMN" 到 Season2的枚举对象去查找</span>
        <span class="token comment">//2. 如果找到了，就返回，如果没有找到，就报错</span>
        <span class="token class-name">Season2</span> autumn1 <span class="token operator">=</span> <span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"AUTUMN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"autumn1="</span> <span class="token operator">+</span> autumn1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>autumn <span class="token operator">==</span> autumn1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//compareTo：比较两个枚举常量，比较的就是编号</span>
        <span class="token comment">//</span>
        <span class="token comment">//1. 就是把 Season2.AUTUMN 枚举对象的编号 和 Season2.SUMMER枚举对象的编号比较</span>
        <span class="token comment">//2. 看看结果</span>
        <span class="token comment">/*
        public final int compareTo(E o) &#123;

            return self.ordinal - other.ordinal;
        &#125;
        Season2.AUTUMN的编号[2] - Season2.SUMMER的编号[3]
         */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">AUTUMN</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Season2</span><span class="token punctuation">.</span><span class="token constant">SUMMER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//补充了一个增强for</span>
<span class="token comment">//        int[] nums = &#123;1, 2, 9&#125;;</span>
<span class="token comment">//        //普通的for循环</span>
<span class="token comment">//        System.out.println("=====普通的for=====");</span>
<span class="token comment">//        for (int i = 0; i &lt; nums.length; i++) &#123;</span>
<span class="token comment">//            System.out.println(nums[i]);</span>
<span class="token comment">//        &#125;</span>
<span class="token comment">//        System.out.println("=====增强的for=====");</span>
<span class="token comment">//        //执行流程是 依次从nums数组中取出数据，赋给i, 如果取出完毕，则退出for</span>
<span class="token comment">//        for(int i : nums) &#123;</span>
<span class="token comment">//            System.out.println("i=" + i);</span>
<span class="token comment">//        &#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li><h4 id="实现接口："><a href="#实现接口：" class="headerlink" title="实现接口："></a>实现接口：</h4><ol>
<li>使用enum关键字后，就不能再继承其它类了，因为enum会隐式继承Enum，而Java是单继承机制</li>
<li>枚举类和普通类一样，可以实现接口：enum 类名 implements 接口1，接口2{}</li>
</ol>
</li>
</ul>
<h2 id="9-3JDk内置的基本注解类型"><a href="#9-3JDk内置的基本注解类型" class="headerlink" title="9.3JDk内置的基本注解类型"></a>9.3JDk内置的基本注解类型</h2><ul>
<li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>注解(Annotation)也被称为元数据(Metadata)，用于修饰解释包,类、方法、属性、构造器、局部变量等数据信息</p>
</li>
<li><p>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</p>
</li>
<li><p>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替java EE旧版本中所有遗留的繁冗代码和XML配置</p>
</li>
</ul>
</li>
<li><h4 id="基本Annotation介绍："><a href="#基本Annotation介绍：" class="headerlink" title="基本Annotation介绍："></a>基本Annotation介绍：</h4><ul>
<li><p>@Override： 限定某个方法，是重写父类方法，该注解只能用于方法</p>
</li>
<li><p>@Deprecated：用于表示某个程序元素(类，方法等)己过时</p>
</li>
<li><p>@SuppressWarnings：抑制编译器警告</p>
</li>
</ul>
</li>
</ul>
<h3 id="9-3-1-Override"><a href="#9-3-1-Override" class="headerlink" title="9.3.1@Override"></a>9.3.1@Override</h3><ul>
<li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>@Override 表示指定重写父类的方法(从编译层面验证)，如果父类没有方法，则会报错</p>
</li>
<li><p>如果没写 @Override 还是会重写父类</p>
</li>
<li><p>@Override 只能修饰方法，不能修饰其它类，包，属性等等</p>
</li>
<li><p>如果写了@Override 注解，编译器就会去检查该方法是否真的重写了父类的方法，若果没有构成重写则编译错误</p>
</li>
<li><p>查看@Override注解源码@Target(ElementType.MRTHOD)，说明只能修饰方法</p>
</li>
<li><p>@Target 是修饰注解的注解，称为元注解</p>
</li>
</ul>
</li>
</ul>
<h3 id="9-3-2-Deprecated"><a href="#9-3-2-Deprecated" class="headerlink" title="9.3.2@Deprecated"></a>9.3.2@Deprecated</h3><ul>
<li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>用于表示某个程序元素(类，方法等)己过时</p>
</li>
<li><p>可以修饰方法，类，字段，包，参数 等等</p>
</li>
<li><p>@Target (value=(CONSTRUCTOR,FIELD,LOCAL_ VARIABLE, METHOD,PACKAGE, PARAMETER, TYPE})</p>
</li>
<li><p>@Deprecated 的作用可以做到新旧版本的兼容和过渡</p>
</li>
</ul>
</li>
</ul>
<h3 id="9-3-3-SuppressWarnings"><a href="#9-3-3-SuppressWarnings" class="headerlink" title="9.3.3@SuppressWarnings"></a>9.3.3@SuppressWarnings</h3><ul>
<li><h4 id="基本介绍：-4"><a href="#基本介绍：-4" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul>
<li><p>抑制编译器警告信息</p>
</li>
<li><p>unchecked 是忽略没有检查的警告</p>
</li>
<li><p>rawtypes 是忽略没有指定泛型的警告</p>
</li>
<li><p>unused 是忽略没有使用某个变量的警告错误</p>
</li>
<li><p>@SuppressWarnings可以修饰的程序元素为，查看@Target</p>
</li>
<li><p>生成@SupperssWarnings 时，不用背，直接点击左侧的黄色提示，就可以选择(注意可以指定生成的位置)</p>
</li>
</ul>
</li>
</ul>
<h2 id="9-4元注解：对注解进行注解"><a href="#9-4元注解：对注解进行注解" class="headerlink" title="9.4元注解：对注解进行注解"></a>9.4元注解：对注解进行注解</h2><ul>
<li><h4 id="基本介绍：-5"><a href="#基本介绍：-5" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>JDK 的元 Annotation 用于修饰其他 Annotation</p>
</li>
<li><h4 id="四种元注解："><a href="#四种元注解：" class="headerlink" title="四种元注解："></a>四种元注解：</h4><ol>
<li>Retention：指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME</li>
<li>Target：指定注解可以在哪些地方使用</li>
<li>Documented：指定该注解是否会在javadoc体现</li>
<li>lnherited：子类会继承父类注解</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN加速GitHub搭配PicGo自建图床</title>
    <url>/2021/08/08/cdn-jia-su-github-da-pei-picgo-zi-jian-tu-chuang/</url>
    <content><![CDATA[<h1 id="CDN加速GitHub搭配PicGo自建图床"><a href="#CDN加速GitHub搭配PicGo自建图床" class="headerlink" title="CDN加速GitHub搭配PicGo自建图床"></a>CDN加速GitHub搭配PicGo自建图床</h1><h2 id="一、什么是图床？"><a href="#一、什么是图床？" class="headerlink" title="一、什么是图床？"></a>一、什么是图床？</h2><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p>
<p>简单来说图床就是用来存放图片的，目的是为了节省本地服务器空间，加快图片打开速度，主要用于个人博客网站等等。github作为图床真挺不错的，利用jsDelivr CDN加速访问，PicGO工具一键上传即可，我们也不用担心跑路问题，而且还免费，可以说是现阶段免费图床的最佳解决方案。</p>
<h2 id="二、新建一个仓库"><a href="#二、新建一个仓库" class="headerlink" title="二、新建一个仓库"></a>二、新建一个仓库</h2><p>1.打开GitHub，在主页点击左上方的new按钮，新建仓库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/1.png" alt="1"></p>
<p>2.填写仓库的相关资料，一般只用填写仓库名，设置权限，其他默认就行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/2.png" alt="2"></p>
<h2 id="三、生成一个Token"><a href="#三、生成一个Token" class="headerlink" title="三、生成一个Token"></a>三、生成一个Token</h2><p>Token在计算机身份认证中是<a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C/9716092">令牌</a>（临时）的意思，在词法分析中是标记的意思。一般作为邀请、登录系统使用。</p>
<p><strong>Token的引入：</strong>Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p>
<p><strong>Token的定义：</strong>Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p>
<p><strong>使用Token的目的：</strong>Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>
<p>1、在主页点击右上角的个人头像，选择Settings</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/3.png" alt="3"></p>
<p>2、滑动到页面最下方，点击左下角的【Developer settings】</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/4.png" alt="4"></p>
<p>3、点击【Personal access tokens】再点击【Generate new token】</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/5.png" alt="5"></p>
<p>4、输入登录密码后，填写好描述，这个token默认有效期为30天，为了稳定，直接改为永不过期。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/6.png" alt="6"></p>
<p>5、勾选【repo】后，滑动到最底部，点击【Generate token】</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/7.png" alt="7"></p>
<p>6、token生成后它只会显示一次，你需要把他记录下来保存到备忘录，方便下次使用，不然你只能重新新建了。</p>
<h2 id="四、配置PicGo"><a href="#四、配置PicGo" class="headerlink" title="四、配置PicGo"></a>四、配置PicGo</h2><p>通过传统的方法向GitHub上传图片太麻烦了，所以我们用开源图床工具PicGo来管理我们的图片上传。</p>
<p>官网：<a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p>
<p>开源仓库：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p>
<p>支持平台：Windows、macOS、Linux</p>
<p>下载好软件后，打开软件，填写下图相关信息，最后确定即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/8.png" alt="8"></p>
<p><strong>上传图片：</strong> 点击上传区，然后ctrl+v或者直接拖进去就行！</p>
<h2 id="五、配置免费CDN：jsDelivr"><a href="#五、配置免费CDN：jsDelivr" class="headerlink" title="五、配置免费CDN：jsDelivr"></a>五、配置免费CDN：jsDelivr</h2><p>CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p>
<p><a href="https://link.ld246.com/forward?goto=https://www.jsdelivr.com">jsDelivr</a> 是一个开源的 CDN 服务，可为 npm 包、GitHub 仓库提供免费、快速并且可靠的全球 CDN 加速服务，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。</p>
<p>（注意：jsDelivr不支持加载超过20M的资源）</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><a href="https://https//cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D@%E7%89%88%E6%9C%AC%E5%8F%B7/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84">https://https://cdn.jsdelivr.net/gh/用户名/仓库名@版本号/文件路径</a></p>
<p>PicGo中设置好域名即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/9.png" alt="9"></p>
<h2 id="六、配置Typora"><a href="#六、配置Typora" class="headerlink" title="六、配置Typora"></a>六、配置Typora</h2><p>1、打开Typora,点击文件——点击偏好设置，完成如图三步即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/10.png" alt="10">2、点击验证图片上传选项，验证成功如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/11.png" alt="11"></p>
<p>3、打开PicGo或GitHub就会看见这两张图片了</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/ty.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/typora/hb.png"></p>
<p>4、现在可以在Typora中自由粘贴图片了，自动上传自动替换链接nice~</p>
<h2 id="七、注意事项"><a href="#七、注意事项" class="headerlink" title="七、注意事项"></a>七、注意事项</h2><ul>
<li><p>作为图床的仓库最好不能超过 1G，因为仓库超过 1G 后会有人工审核仓库内容。一旦发现用于图床可能会被删库也可能会被封号！！！所以建议在 1G 之前就换个仓库</p>
</li>
<li><p>仓库是公开的，所以图片放上去要注意隐私问题，特别是单位的一些涉密资料</p>
</li>
</ul>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言函数专题突破</title>
    <url>/2021/07/08/c-yu-yan-han-shu-zhuan-ti-tu-po/</url>
    <content><![CDATA[<h1 id="C语言函数专题突破"><a href="#C语言函数专题突破" class="headerlink" title="C语言函数专题突破"></a>C语言函数专题突破</h1><h2 id="一、函数概念"><a href="#一、函数概念" class="headerlink" title="一、函数概念"></a>一、函数概念</h2><h3 id="x1F914-1-什么是函数呢-•-•"><a href="#x1F914-1-什么是函数呢-•-•" class="headerlink" title="&#x1F914; 1.什么是函数呢(• . •)?"></a>&#x1F914; 1.什么是函数呢(<em>• . •</em>)?</h3><p>含树是什么鬼呢……?</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/05AACDA9997A98994F08B0B638743088.png"></p>
<p>在中学时大家都知道函数是贯穿初高中数学学习的一个非常重要的知识点，C语言中的函数也是同样重要的，那么二者有何相似之处呢？</p>
<p>对于函数式编程来说，编程中的函数与数学中的函数没什么大的区别,例如都可以有多个参数、都有函数的函数(高阶函数)等等。数学中<strong>函数</strong>是将一个对象转化为另一个对象的规则。起始对象称为<strong>输入</strong>，来自称为<strong>定义域</strong>的集合。返回对象称为<strong>输出</strong>，来自称为<strong>上域</strong>的集合。</p>
<p>&#x1F92A;噢~</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/hs.jpg"></p>
<table><tr><td bgcolor="yellow">官方定义：</td></tr></table>

<p><mark>官方定义</mark></p>
<blockquote>
<p>函数是指一段可以直接被另一段程序或代码引用的程序或代码。也叫做子程序、（OOP中）方法。<br>一个较大的程序一般应分为若干个程序块，每一个模块用来实现一个特定的功能。所有的高级语言中都有子程序这个概念，用子程序实现模块的功能。在C语言中，子程序是由一个主函数和若干个函数构成的。由主函数调用其他函数，其他函数也可以互相调用。同一个函数可以被一个或多个函数调用任意多次。</p>
</blockquote>
<h3 id="x1F914-2-为什么要使用函数呢r-･x･"><a href="#x1F914-2-为什么要使用函数呢r-･x･" class="headerlink" title="&#x1F914;2.为什么要使用函数呢r(･x･)???"></a>&#x1F914;2.为什么要使用函数呢r(･x･)???</h3><p>使用函数可以省去编写重复代码的苦差。如果程序要多次完成某项任务，那么只需编写一个合适的函数，就可以在需要时使用这个函数，或者在不同的程序中使用该函数，就像许多程序中使用putchar()一样。其次，即使程序只完成某项任务一次，也值得使用函数。因为函数让程序更加模块化，从而提高了程序代码的可读性，更方便后期修改、完善。</p>
<h2 id="二、C标准函数库"><a href="#二、C标准函数库" class="headerlink" title="二、C标准函数库"></a>二、C标准函数库</h2><h3 id="x1F914-1-什么是标准函数-•-•"><a href="#x1F914-1-什么是标准函数-•-•" class="headerlink" title="&#x1F914;1.什么是标准函数(• . •)?"></a>&#x1F914;1.什么是标准函数(<em>• . •</em>)?</h3><p>在C语言程序设计里，<strong>C 标准函数</strong>（C Standard library）是所有符合标准的头文件（head file）的集合，以及常用的函数库实现程序，例如 I/O输入输出和字串符控制。</p>
<h3 id="x1F9D0-2-库函数分类"><a href="#x1F9D0-2-库函数分类" class="headerlink" title="&#x1F9D0;2.库函数分类"></a>&#x1F9D0;2.库函数分类</h3><ul>
<li>I/O函数</li>
<li>字符串、内存和字符函数</li>
<li>数学函数</li>
<li>时间、日期和与系统有关的函数</li>
<li>动态存储分配</li>
<li>目录管理</li>
<li>过程控制</li>
<li>字符屏幕和图形功能</li>
<li>其他函数</li>
</ul>
<h2 id="三、函数的参数"><a href="#三、函数的参数" class="headerlink" title="三、函数的参数"></a>三、函数的参数</h2><h3 id="x1F9CA-1-实际参数-实参"><a href="#x1F9CA-1-实际参数-实参" class="headerlink" title="&#x1F9CA;1.实际参数(实参)"></a>&#x1F9CA;1.实际参数(实参)</h3><p><mark style="background-color:#00BFFF"> ① 实参是主调函数赋给被调函数的具体值 </mark></p>
<p><mark style="background-color:#00BFFF"> ② 实参可以是：常量、变量、表达式、函数等 </mark></p>
<p><mark style="background-color:#00BFFF"> ③ 无论实参是何种形式都要被<strong>求值</strong>，然后该值被拷贝给被调函数相应的形参</mark></p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="x1F9CA-2-形式参数-形参"><a href="#x1F9CA-2-形式参数-形参" class="headerlink" title="&#x1F9CA;2.形式参数(形参)"></a>&#x1F9CA;2.形式参数(形参)</h3><p><mark style="background-color:#00BFFF"> ① 形参就是函数名后括号中的局部变量 </mark></p>
<p><mark style="background-color:#00BFFF"> ② 当主调函数调用完成后，形参就会自动销毁。因此形参只在函数中有效 </mark></p>
<p><mark style="background-color:#00BFFF"> ③ 被调函数使用的值是从主调函数中拷贝而来,无论被调函数对拷贝数据进行什么操作,都不会影响主调函数中的原始数据 </mark></p>
<h2 id="四、函数的类型"><a href="#四、函数的类型" class="headerlink" title="四、函数的类型"></a>四、函数的类型</h2><p><font face="楷体" size="5">&#x1F3B6;声明函数时必须声明函数的类型。带返回值的函数类型应该与其返回值类型相同，而没有返回值的函数应声明为void类型。</font></p>
<p>&#x1F3B6;如果没有声明函数的类型，<mark>旧版本的C编译器会假定函数的类型是int。然而，C99标准不再支持int类型函数的这种假定设置。</mark></p>
<p><strong>&#x1F3B6;类型声明是函数定义的一部分。要记住，函数类型指的是返回值的类型，不是函数参数的类型！</strong></p>
<h2 id="五、函数的调用"><a href="#五、函数的调用" class="headerlink" title="五、函数的调用"></a>五、函数的调用</h2><ul>
<li>调用者 被称为<mark>主调函数</mark>一般为main()函数，</li>
<li>被调用者  称为<mark>被调函数</mark>一般为自定义函数或者库函数。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/t.jpg"></p>
<h3 id="cherries-1-传值调用"><a href="#cherries-1-传值调用" class="headerlink" title=":cherries:1.传值调用"></a>:cherries:1.传值调用</h3><p>传值实际是把实参的值赋给形参，相当于copy,那么对形参的修改不会影响实参的值。</p>
<pre class="language-C" data-language="C"><code class="language-C">void swap(int x,int y)
&#123;
    int z&#x3D;x;
    x&#x3D;y;
    y&#x3D;z;
&#125;</code></pre>



<h3 id="cherries-2-传址调用"><a href="#cherries-2-传址调用" class="headerlink" title=":cherries:2.传址调用"></a>:cherries:2.传址调用</h3><p>传址实际是传值的一种特殊方式，只不过它是传递的地址，不是普通的赋值，传地址后，实参和形参都指向同一个对象，因此对形参的修改会影响到实参。</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="cherries-3-函数调用案例"><a href="#cherries-3-函数调用案例" class="headerlink" title=":cherries:3.函数调用案例"></a>:cherries:3.函数调用案例</h3><p>输入一个整数数判断是否是闰年。</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">leapyear</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>	
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%s\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token function">leapyear</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"年是润年"</span><span class="token operator">:</span><span class="token string">"年是平年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>传址例题：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">yi</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>p<span class="token operator">&lt;&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>	
	<span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">yi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="六、递归函数"><a href="#六、递归函数" class="headerlink" title="六、递归函数"></a>六、递归函数</h2><h3 id="1-什么是递归？"><a href="#1-什么是递归？" class="headerlink" title="1.什么是递归？"></a>1.什么是递归？</h3><table><tr><td bgcolor="yellow">C允许函数调用它自己，这种调用过程称为递归!</td></tr></table>

<p>   啥？自己调用自己……</p>
<p>​                                    <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5187/EDF0.jpg">                                      <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5187/AC5F1.png">  </p>
<p>👩‍🏫讲个古老的故事：</p>
<table><tr><td bgcolor="#c77eb5">&nbsp&nbsp&nbsp&nbsp从前有座山，山上有座庙，庙里有个老和尚，老和尚在给小和尚讲故事，故事讲的是从前有座山，山上有座庙，庙里有个老和尚，老和尚在给小和尚讲故事，故事讲的是从前有座山，山上有座庙，庙里有个老和尚，老和尚在给小和尚讲故事，故事讲的是从前有座山，山上有座庙，庙里有个老和尚，老和尚在给小和尚讲故事，故事讲的是从前有座山，山上有座庙，庙里有个老和尚，老和尚在给小和尚讲故事，故事讲的是从前有座山，山上有座庙，庙里有个老和尚，老和尚在给小和尚讲故事······</td></tr></table>

<p>  🥤递归呢就是这样：</p>
<p>​                                                    <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5187/32C.gif" width="300px/"></p>
<p>甲：你猜    </p>
<p>乙：你猜我猜不猜</p>
<p>甲：你猜我猜不猜你猜不猜</p>
<p>乙：你猜我猜不猜你猜不猜我猜不猜</p>
<p> …………                  </p>
<table><tr><td bgcolor="yellow"><font size="5">但是呢递归必须要有一个退出的条件！</font></td></tr></table>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5187/91.jpg" alt="91"></p>
<p><mark>官方定义</mark></p>
<blockquote>
<p>一个过程或<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0">函数</a>在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的<a href="https://baike.baidu.com/item/%E8%AF%AD%E5%8F%A5">语句</a>来定义对象的<a href="https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E9%9B%86%E5%90%88">无限集合</a>。一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</p>
</blockquote>
<p><font face="微软雅黑" size="5">下面我们通过一个程序示例，来学习到底是怎么递归的吧ξ( ✿＞◡❛)</font></p>
<pre class="language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
void recursion(int);
int main(void)
&#123;
	recursion(1);
	system(&quot;pause&quot;);
	return 0;
&#125;
void recursion(int n)
&#123;
	printf(&quot;第%d级递归:　n　位置为：%p\n&quot;, n, &amp;n);&#x2F;&#x2F;#1

	if(n&lt;4)
		recursion(n+ 1);
	printf(&quot;第%d层递归:　n　位置为：%p\n&quot;, n, &amp;n);&#x2F;&#x2F;#2
&#125;
</code></pre>

<p><strong>&#x2618;运行结果：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/di.jpg" alt="di"></p>
<p><strong>&#x2618;逐步分析：</strong></p>
<p>首先，main()调用了带参数1的recursion()函数，执行结果是recursion()中的形参n的值为1，然后打印<strong>第1级递归：</strong> 然后，由于n小于4，recursion()（第1级）调用实参n+1的recursion()（第2级 ）。于是第2级调用中的n的值是2，打印语句<strong>第2级递归：</strong> 与此类似，下面两次调用打印的分别是<strong>第3级递归：</strong> 和<strong>第4级递归：</strong> 。</p>
<p>当执行到第4级时，n的值是4，所以if测试条件为假。recursion()函数不再调用自己。第4级调用接着执行打印语句#2，即打印<strong>第4层递归</strong>，因为n的值是4。此时，第4级调用结束，控制被传回它的主调函数（即第3级调用）。在第3级调用中，执行的最后一条语句是调用if语句中的第4级调用。被调函数（第4级调用）把控制返回在这个位置，因此，第3级调用继续执行后面的代码，打印语句#2打印<strong>第3层递归</strong>。然后第3级调用结束，控制被传回第2级调用，接着打印<strong>第2层递归</strong>，以此类推。</p>
<p><strong>注意，每级递归的变量 n 都属于本级递归私有。这从程序输出的地址值可以看出</strong></p>
<p><mark>递归基本原理</mark></p>
<table><tr><td bgcolor="#feabcd"><b>第1</b>，每级函数调用都有自己的变量。也就是说，第1级的n和第2级的n不同，所以程序创建了4个单独的变量，每个变量名都是n，但是它们的值各不相同。当程序最终返回 recursion()的第1 级调用时，最初的n仍然是它的初值1（见下图）。</td></tr></table>



<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5187/ghz.jpg"></p>
<table><tr><td bgcolor="#feabcd"><b>第2</b>，每次函数调用都会返回一次。当函数执行完毕后，控制权将被传回上一级递归。程序必须按顺序逐级返回递归，从某级recursion()返回上一级的recursion()，不能跳级回到main()中的第1级调用。<br>
    <b>第3</b>，递归函数中位于递归调用之前的语句，均按被调函数的顺序执行。例如，打印语句#1位于递归调用之前，它按照递归的顺序：第1级、第2级、第3级和第4级，被执行了4次。第4，递归函数中位于递归调用之后的语句，均按被调函数相反的顺序执行。例如，打印语句#2位于递归调用之后，其执行的顺序是第4级、第3级、第2级、第1级。<br>
    <br><b>第5</b>，虽然每级递归都有自己的变量，但是并没有拷贝函数的代码。程序按顺序执行函数中的代码，而递归调用就相当于又从头开始执行函数的代码。除了为每次递归调用创建变量外，递归调用非常类似于一个循环语句。实际上，递归有时可用循环来代替，循环有时也能用递归来代替。</td></tr></table>

<h3 id="2-递归习题详解"><a href="#2-递归习题详解" class="headerlink" title="2.递归习题详解"></a>2.递归习题详解</h3><p>编程用递归实现n的阶乘。</p>
<pre class="language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
unsigned factorial(unsigned);
int main(void)
&#123;
	unsigned n;
	scanf(&quot;%u&quot;, &amp;n);
	printf(&quot;%d的阶乘为：%d\n&quot;,n, factorial(n));
	system(&quot;pause&quot;);
	return 0;
&#125;
unsigned factorial(unsigned n)
&#123;
	unsigned result;
	if (n &#x3D;&#x3D; 0||n&#x3D;&#x3D;1)
		result&#x3D;1;
	else
		result&#x3D;n*factorial(n-1);

	return result;
&#125;
</code></pre>

<p><strong>&#x2618;运行结果：</strong></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5187/jiecheng.png" alt="jiecheng"></p>
<p><strong>&#x2618;详细分析：</strong></p>
<p><strong>递归的进入</strong></p>
<p>①我们输入5求5！，即调用factorial(5)。当进入factorial()函数体后，由于形参 n 的值为 5，不等于 0 或 1，所以执行**<mark>factorial(n-1) * n</mark>，也 <mark>即执行factorial(4) * 5</mark>**。为了求得这个表达式的结果，必须先调用 factorial(4)，并暂停其他操作。换句话说，在得到 factorial(4) 的结果之前，不能进行其他操作。这就是<mark style="background-color:#00BFFF">第一次递归。</mark></p>
<p>② 调用 factorial(4) 时，实参为 4，形参 n 也为 4，不等于 0 或 1，会继续执行**<mark>factorial(n-1) * n，也即执行factorial(3) * 4</mark>**。为了求得这个表达式的结果，又必须先调用 factorial(3)。这就是第二次递归。</p>
<p>③ 以此类推，进行四次递归调用后，实参的值为 1，会调用 factorial(1)。此时能够直接得到常量 1 的值，并把结果 return，就不需要再次调用 factorial() 函数了，递归就结束了。</p>
<h2 align="center" size="50">下表列出逐层进入的过程</h2>

<table>
<thead>
<tr>
<th align="center">层次/层数</th>
<th align="center">实参/形参</th>
<th align="center">调用形式</th>
<th align="center">需要计算的表达式</th>
<th align="center">需要等待的结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">n=5</td>
<td align="center">factorial(5)</td>
<td align="center">factorial(4)*5</td>
<td align="center">factorial(4)的结果</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">n=4</td>
<td align="center">factorial(4)</td>
<td align="center">factorial(3)*4</td>
<td align="center">factorial(3)的结果</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">n=3</td>
<td align="center">factorial(3)</td>
<td align="center">factorial(2)*3</td>
<td align="center">factorial(2)的结果</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">n=2</td>
<td align="center">factorial(2)</td>
<td align="center">factorial(1)*2</td>
<td align="center">factorial(1)的结果</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">n=1</td>
<td align="center">factorial(1)</td>
<td align="center">1</td>
<td align="center">无</td>
</tr>
</tbody></table>
<p><strong>递归的退出</strong></p>
<p>当递归进入到最内层的时候，递归就结束了，就开始逐层退出了，也就是逐层执行 return 语句。</p>
<p>① n 的值为 1 时达到最内层，此时 return 出去的结果为 1，也即 factorial(1) 的调用结果为 1。</p>
<p>② 有了 factorial(1) 的结果，就可以返回上一层计算<mark> factorial(1) * 2 </mark>的值了。此时得到的值为 2，return 出去的结果也为 2，也即 factorial(2) 的调用结果为 2。</p>
<p>③ 以此类推，当得到 factorial(4) 的调用结果后，就可以返回最顶层。经计算，factorial(4) 的结果为 24，那么表达式<mark> factorial(4) * 5 </mark>的结果为 120，此时 return 得到的结果也为 120，也即 factorial(5) 的调用结果为 120，这样就得到了 5! 的值。</p>
<h2 align="center" size="50">下表列出逐层退出的过程</h2>

<table>
<thead>
<tr>
<th align="center">层次/层数</th>
<th align="center">调用形式</th>
<th align="center">需要计算的表达式</th>
<th align="center">从内层递归得到的结果 （内层函数的返回值）</th>
<th align="center">表达式的值 （当次调用的结果）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5</td>
<td align="center">factorial(1)</td>
<td align="center">1</td>
<td align="center">无</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">factorial(2)</td>
<td align="center">factorial(1) * 2</td>
<td align="center">factorial(1) 的返回值，也就是 1</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">factorial(3)</td>
<td align="center">factorial(2) * 3</td>
<td align="center">factorial(2) 的返回值，也就是 2</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">factorial(4)</td>
<td align="center">factorial(3) * 4</td>
<td align="center">factorial(3) 的返回值，也就是 6</td>
<td align="center">24</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">factorial(5)</td>
<td align="center">factorial(4) * 5</td>
<td align="center">factorial(4) 的返回值，也就是 24</td>
<td align="center">120</td>
</tr>
</tbody></table>
<p><strong>递推回推图解</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/jingru.jpg" alt="jingru"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/huitui.jpg" alt="huitui"></p>
<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5187/4F7.jpg"></p>
<h3 id="3-递归与循环"><a href="#3-递归与循环" class="headerlink" title="3.递归与循环"></a>3.递归与循环</h3><p>csdn一篇教程中有一段话我觉得特别贴切” <font size="5">递归：</font> <strong>你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门，你继续打开它。若干次之后，你打开面前的门后，发现只有一间屋子，没有门了。然后，你开始原路返回，每走回一间屋子，你数一次，走到入口的时候，你可以回答出你到底用这你把钥匙打开了几扇门。</strong></p>
<p>　　<font size="5"> 循环：</font> <strong>你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门（若前面两扇门都一样，那么这扇门和前两扇门也一样；如果第二扇门比第一扇门小，那么这扇门也比第二扇门小，你继续打开这扇门，一直这样继续下去直到打开所有的门。但是，入口处的人始终等不到你回去告诉他答案。”​</strong></p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言函数</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/02/08/git/</url>
    <content><![CDATA[<p><img src="/2022/02/08/git/tiger.jpg" alt="alt 图片">  </p>
<h2 id="一、Git基本概念"><a href="#一、Git基本概念" class="headerlink" title="一、Git基本概念"></a>一、Git基本概念</h2><p>Git是目前世界上最先进的分布式版本管理系统。 </p>
<h3 id="1-三种状态"><a href="#1-三种状态" class="headerlink" title="1.三种状态"></a>1.三种状态</h3><p>Git有三种状态，文件可能处于其中之一：<em><strong>已提交(committed)</strong></em> 、<em><strong>已修改(modified)</strong></em> 、<em><strong>已暂存(staged)</strong></em> 。  </p>
<ul>
<li><em><strong>已修改：</strong></em> 表示修改了文件，但还没有保存到数据库中。  </li>
<li><em><strong>已暂存：</strong></em> 表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。  </li>
<li><em><strong>已提交：</strong></em> 表示数据已经安全地保存在本地数据库中。  </li>
<li>workspace：工作区  就是电脑上看见的目录，</li>
<li>Index或stage：暂存区 就是需要提交的文件修改都放在暂存区的，一般在Git仓库目录中。  </li>
<li>Repository：git目录 git用来保存项目的元数据和对象数据库的地方。  </li>
<li>remote：远程仓库  </li>
</ul>
<h3 id="2-GIT的工作流程"><a href="#2-GIT的工作流程" class="headerlink" title="2.GIT的工作流程"></a>2.GIT的工作流程</h3><p>1.在工作区中修改文件<br>2.将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。<br>3.提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。  </p>
<h2 id="二、在Windows上安装Git"><a href="#二、在Windows上安装Git" class="headerlink" title="二、在Windows上安装Git"></a>二、在Windows上安装Git</h2><p>msysgit是Windows版的Git，从<a href="http://msysgit.github.io/">http://msysgit.github.io</a>下载，然后按默认选项安装即可。 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！<br>安装完成后，还需要最后一步设置，在命令行输入：  </p>
<pre><code>git config --global user.name &quot;Your Name&quot; 
git config --global user.email &quot;email@example.com&quot;
</code></pre>
<p>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。  </p>
<p><em><strong>检查配置信息</strong></em><br>如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置。  </p>
<p><em><strong>查看用户名和邮箱：</strong></em><br><img src="/2022/02/08/git/chakan.png" alt="alt 图">  </p>
<h2 id="三、创建Git仓库"><a href="#三、创建Git仓库" class="headerlink" title="三、创建Git仓库"></a>三、创建Git仓库</h2><p>通常有两种获取 Git 项目仓库的方式：  </p>
<ol>
<li>将尚未进行版本控制的本地目录转换为 Git 仓库；</li>
<li>从其它服务器 克隆 一个已存在的 Git 仓库。 </li>
</ol>
<p>首先，选择一个合适的地方，创建一个空目录，然后通过Git init命令把这个目录变成Git可以管理的仓库：<br>如图所示：<br><img src="/2022/02/08/git/ji.png" alt="建立git库">  </p>
<h2 id="四、把文件添加到版本库"><a href="#四、把文件添加到版本库" class="headerlink" title="四、把文件添加到版本库"></a>四、把文件添加到版本库</h2><p>例如：在工作区新建一个read.txt文本文档，写入如下内容：    </p>
<blockquote>
<p>Git是一个版本控制系统。<br>Git是一款免费软件。  </p>
</blockquote>
<p>第一步：用命令git add &lt;file&gt; 告诉Git，把文件添加到仓库。<br>第二部：用命令git commit告诉Git，把文件提交到仓库。<br><img src="/2022/02/08/git/111.jpg" alt="添加文件到Git仓库"><br>git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。  </p>
<h2 id="五、查看当前状态"><a href="#五、查看当前状态" class="headerlink" title="五、查看当前状态"></a>五、查看当前状态</h2><p>成功添加并提交了一个read.txt文件，现在更改文件内容，改成如下内容：  </p>
<blockquote>
<p>Git是一个分布式的版本控制系统。<br>Git是一款免费软件。</p>
</blockquote>
<p>然后运行git status命令可以查看结果：  </p>
<p><img src="/2022/02/08/git/222.jpg" alt="修改后查看结果"></p>
<p>上面的命令可以告诉我们，read.txt被修改过了，但还没有准备提交的修改。  </p>
<h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><p>可以用 git diff 查看：<br><img src="/2022/02/08/git/333.jpg" alt="查看修改内容"><br>然后再用git add read.txt提交修改<br>可以用git status查看当前仓库的状态<br>最后可用 git commit -m “增加了分布式”  命令添加到Git仓库。 </p>
<p>如图所示：  </p>
<p><img src="/2022/02/08/git/444.jpg">  </p>
<h2 id="六、版本回退"><a href="#六、版本回退" class="headerlink" title="六、版本回退"></a>六、版本回退</h2><p>现在再次修改read.txt文件，修改后内容如下：  </p>
<blockquote>
<p>Git是一个分布式的版本控制系统。<br>Git是在GPL下发布的免费软件。  </p>
</blockquote>
<p>然后提交：<br>命令如下：  </p>
<pre><code>git add read.txt
git commit -m &quot;增加了GPL&quot;  
</code></pre>
<p><strong>现在read.txt文件一共有3个版本提交到了git仓库里了：</strong><br>版本1：  </p>
<blockquote>
<p>Git是一个版本控制系统。<br>Git是一款免费软件。  </p>
</blockquote>
<p>版本2：  </p>
<blockquote>
<p>Git是一个分布式的版本控制系统。<br>Git是一款免费软件。</p>
</blockquote>
<p>版本3： </p>
<blockquote>
<p>Git是一个分布式的版本控制系统。<br>Git是在GPL下发布的免费软件。    </p>
</blockquote>
<h3 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h3><p>在git中，我们可以用git log命令查看：<br>如图所示：<br><img src="/2022/02/08/git/555.jpg" alt="git log查看历史记录"><br>git log命令显示的是最近到最远的提交日志。<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上  –pretty=oneline参数：  </p>
<blockquote>
<p>git log –pretty=oneline  </p>
</blockquote>
<p>这样便可以查看到简洁版的历史记录了！  </p>
<h3 id="回到指定版本"><a href="#回到指定版本" class="headerlink" title="回到指定版本"></a>回到指定版本</h3><p>现在我们把read.txt回退到上一个版本，也就是说回到“增加了分布式”的那个版本，怎么做呢？<br>在git中：<br><strong>HEAD表示当前版本</strong><br><strong>上一个版本是HEAD^</strong><br><strong>上上一个版本就是HEAD^^</strong><br>当然往上100个版本写100个^比较容易数不过来，所以写成<strong>HEAD~100</strong>  </p>
<p>具体命令：<br>当前版本“增加了GPL”回退到上一个版本“增加了分布式”，就可以用：git reset命令：<br>如图所示：<br><img src="/2022/02/08/git/666.jpg" alt="回退到上一个版本">  </p>
<p>现在用git log命令可以发现“增加了GPL”那个版本已经不见了。<br>如果在想回到“增加了GPL”这个版本该怎么办呢？<br>那么需要找到之前那个版本的版本号，即commit 后这串字符。（221eaef1d762df37da9892d2c1905e5b27a463c9 ）<br>具体命令为：<br>    git reset –hard 221eaef1d762d   </p>
<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。  </p>
<p>然后再查看一下read.txt中的内容：<br><img src="/2022/02/08/git/777.jpg">  </p>
<p>若是关闭电脑后找不到commit id 了怎么办？  </p>
<blockquote>
<p>Git提供了一个命令git reflog用来记录每一次命令    </p>
</blockquote>
<p><img src="/2022/02/08/git/888.jpg" alt="git reflog记录历史命令">  </p>
<p>现在知道commit id后又可以回到指定版本了！  </p>
<h2 id="七、管理修改"><a href="#七、管理修改" class="headerlink" title="七、管理修改"></a>七、管理修改</h2><p><strong>git管理并跟踪的是修改，而不是文件</strong>   </p>
<p>什么是修改？ </p>
<blockquote>
<p>比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。  </p>
</blockquote>
<p><strong>git commit只负责把暂存区的修改提交！</strong><br><strong>每次修改，如果不add到暂存区，那就不会加入到commit中。</strong>  </p>
<h2 id="八、撤销修改"><a href="#八、撤销修改" class="headerlink" title="八、撤销修改"></a>八、撤销修改</h2><p>假如现在添加一行内容：“我愚蠢的老板还是更喜欢SVN。”<br>然后git add之前，你想到这样写不对，<br>再用git status查看一下状态。你可以发现，Git会告诉你，git checkout – file可以丢弃工作区的修改：<br>git checkout – read.txt后，就会撤销掉工作区的修改，回到和版本库中的状态。  </p>
<p>如果已经提交到了工作区，又修改之后，再用git checkout – read.txt命令可以回到工作区时的样子。（在工作区修改的样子）  </p>
<p>Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：<br>最后用git chekout就可以丢弃掉工作区的修改回到版本库中的样子。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1.当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。 </p>
<p>2.当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了1，第二步按1操作.  </p>
<p>3.已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
<h2 id="九、删除文件"><a href="#九、删除文件" class="headerlink" title="九、删除文件"></a>九、删除文件</h2><p>先添加一个文件test.txt到Git并且提交：  </p>
<pre><code>git add test.txt 
git commit -m &quot;增加 test.txt&quot;  
</code></pre>
<p>然后再把test.txt文件删了，或者用rm命令删除。<br>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：<br><img src="/2022/02/08/git/999.jpg"><br>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：<br><img src="/2022/02/08/git/a.jpg" alt="删除版本库中的test">  </p>
<p>现在，文件就从版本库中被删除了。<br> 另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：  </p>
<blockquote>
<p>git checkout – test.txt  </p>
</blockquote>
<p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。  </p>
<h2 id="十、分支"><a href="#十、分支" class="headerlink" title="十、分支"></a>十、分支</h2><p><strong>Head指向master主分支</strong><br><strong>master指向commit提交</strong>  </p>
<p>查看分支：git branch  </p>
<p>创建分支：git branch 分支名  </p>
<p>切换分支：git checkout 分支名  </p>
<p>创建+切换分支：git checkout -b 分支名  </p>
<p>合并某分支到当前分支：git merge 分支名  </p>
<p>删除分支：git branch -d 分支名  </p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub注册</title>
    <url>/2021/01/13/github-zhu-ce/</url>
    <content><![CDATA[<h1 id="GitHub账号注册"><a href="#GitHub账号注册" class="headerlink" title="GitHub账号注册"></a>GitHub账号注册</h1><h2 id="一、GitHub官方地址"><a href="#一、GitHub官方地址" class="headerlink" title="一、GitHub官方地址"></a>一、GitHub官方地址</h2><p><a href="https://github.com/">https://github.com</a></p>
<h2 id="二、具体步骤"><a href="#二、具体步骤" class="headerlink" title="二、具体步骤"></a>二、具体步骤</h2><h3 id="1-输入网址"><a href="#1-输入网址" class="headerlink" title="1.输入网址"></a>1.输入网址</h3><p>输入网址进入首页后，点击右上角的【Sign up】进行注册。如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gzhuce.png"></p>
<h3 id="2-进入注册界面填写信息"><a href="#2-进入注册界面填写信息" class="headerlink" title="2.进入注册界面填写信息"></a>2.进入注册界面填写信息</h3><p>①输入邮箱</p>
<p>这里我们就输入QQ邮箱吧，修改密码、找回密码都会用到的。</p>
<p>②输入密码</p>
<p>密码中仅包含数字或仅包含字母的话，那么至少需要15位字符</p>
<p>密码中既包含数字，又包含字母的话，最少要8位字符</p>
<p>不能使用连续的字符，如12345、abcdef等</p>
<p>③输入用户名</p>
<p>用户名不能使用中文，只能是数字、字母、连字符(-),不能以连字符开头或结尾</p>
<p>用户名不能跟已有用户名重复，重复了它会提示你的</p>
<p>④您是否希望收到产品更新和通知？<br>输入“y”表示“是”或“n”表示“否”。</p>
<p>⑤人机交互验证</p>
<p>用来验证是人为注册还是机器人注册，防止恶意注册的</p>
<p>点击验证，然后选出旋涡星系即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gmima.png"></p>
<h3 id="3-输入验证码"><a href="#3-输入验证码" class="headerlink" title="3.输入验证码"></a>3.输入验证码</h3><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gyan.png"></p>
<p>如果无法验证您的验证码响应。</p>
<p>进入qq邮箱把github设置成邮箱白名单</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gfan.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gbai.png"></p>
<h3 id="4-偏好收集页面"><a href="#4-偏好收集页面" class="headerlink" title="4.偏好收集页面"></a>4.偏好收集页面</h3><p>根据自身需要选择即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gme.png"></p>
<p>感兴趣就选择即可，直接continue也可以</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gcon.png"></p>
<p>点击continue for free即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gfree.png"></p>
<h2 id="三、开启GitHub之旅"><a href="#三、开启GitHub之旅" class="headerlink" title="三、开启GitHub之旅"></a>三、开启GitHub之旅</h2><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/gkai.png"></p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Java运行机制</title>
    <url>/2021/05/27/java-yun-xing-ji-zhi/</url>
    <content><![CDATA[<h1 id="java运行机制"><a href="#java运行机制" class="headerlink" title="java运行机制"></a>java运行机制</h1><h2 id="java核心机制–java虚拟机【JVM】"><a href="#java核心机制–java虚拟机【JVM】" class="headerlink" title="java核心机制–java虚拟机【JVM】"></a>java核心机制–java虚拟机【JVM】</h2><p>1.JVM(Java虚拟机)一种用于计算设备的规范，可用不同的方式（软件或硬件）加以实现。编译虚拟机的指令集与编译微处理器的指令集非常类似。Java虚拟机包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域。</p>
<p>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在JDK中.</p>
<p>2.对于不同平台有不同的虚拟机</p>
<p>Java 程序通过 JVM 可以实现跨平台特性，但 JVM 是不跨平台的。也就是说，不同操作系统之上的 JVM 是不同的，Windows 平台之上的 JVM 不能用在 Linux 平台，反之亦然。</p>
<p>3.Java虚拟机(JVM)是可运行Java代码的假想计算机。只要根据JVM规格描述将解释器移植到特定的计算机上，就能保证经过编译的任何Java代码能够在该系统上运行。</p>
<p><strong>为什么java要用虚拟机呢？</strong></p>
<blockquote>
<p>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行,至少需要编译成不同的目标代码。而引入Java语言虚拟机后,Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息,使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时,把字节码解释成具体平台上的机器指令执行。</p>
</blockquote>
<h2 id="Java运行机制"><a href="#Java运行机制" class="headerlink" title="Java运行机制"></a>Java运行机制</h2><p>Java程序的运行必须经过<font color="red">编辑、编译、运行</font>三个步骤。</p>
<p>1.编辑是指在Java开发环境中进行程序代码的输入，最终形成后缀名为.java的Java源文件。</p>
<p>2.编译是指使用Java编译器对源文件进行错误排查的过程，编译后将生成后缀名为.class的<mark style="background-color:#00BFFF">字节码文件</mark>，这不像C语言那样最终生成可执行文件。</p>
<blockquote>
<p>字节码文件是一种和任何具体机器环境及操作系统环境无关的中间代码，它是一种二进制文件，是Java源文件由Java编译器编译后生成的目标代码文件。编程人员和计算机都无法直接读懂字节码文件，它必须由专用的Java解释器来解释执行，因此Java是一种在编译基础上进行解释运行的语言。</p>
</blockquote>
<p>3.运行是指使用Java解释器将字节码文件翻译成机器代码，执行并显示结果。</p>
<p>Java解释器负责将字节码文件翻译成具体硬件环境和操作系统平台下的机器代码，以便执行。因此Java程序不能直接运行在现有的操作系统平台上，它必须<strong>运行在被称为Java虚拟机的软件平台之上。</strong></p>
<p>java运行流程如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="图0 java程序运行流程"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/ZZ41409331Y.png" alt="图1 java程序运行流程"></p>
<p><mark>Java 虚拟机（JVM）是运行 Java 程序的软件环境，Java 解释器是 Java 虚拟机的一部分。</mark>在运行 Java 程序时，首先会启动 JVM，然后由它来负责解释执行 Java 的字节码程序，并且 Java 字节码程序只能运行于 JVM 之上。这样利用 JVM 就可以把 Java 字节码程序和具体的硬件平台以及操作系统环境分隔开来，只要在不同的计算机上安装了针对特定平台的 JVM，Java 程序就可以运行，而不用考虑当前具体的硬件平台及操作系统环境，也不用考虑字节码文件是在何种平台上生成的。</p>
<p>JVM 把这种不同软、硬件平台的具体差别隐藏起来，从而实现了真正的二进制代码级的跨平台移植。JVM 是 Java 平台架构的基础，Java 的跨平台特性正是通过在 JVM 中运行 Java 程序实现的。Java 的这种运行机制可以通过图 2 来说明。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/article_picture/b0.png" alt="图2 JVM工作方式"></p>
<p>Java语言这种“一次编写，到处运行（write once，run anywhere）”的方式，有效地解决了目前大多数高级程序设计语言需要针对不同系统来编译产生不同机器代码的问题，即硬件环境和操作平台的异构问题，大大降低了程序开发、维护和管理的开销。</p>
<h2 id="什么是JDK和JRE"><a href="#什么是JDK和JRE" class="headerlink" title="什么是JDK和JRE"></a>什么是JDK和JRE</h2><ol>
<li>JDK 的全称(Java Development Kit Java 开发工具包)<br><mark>JDK = JRE + java 的开发工具[java, javac,javadoc,javap 等]</mark></li>
<li>JDK 是提供给Java 开发人员使用的，其中包含了java 的开发工具，也包括了JRE。所以安装了JDK，就不用在单独<br>安装JRE 了。</li>
</ol>
<p><strong>JRE 基本介绍</strong></p>
<ol>
<li><p>JRE(Java Runtime Environment Java 运行环境)<br><mark> JRE = JVM + Java 的核心类库[类]</mark></p>
</li>
<li><p>包括Java 虚拟机(JVM Java Virtual Machine)和Java 程序所需的核心类库等，如果想要运行一个开发好的Java 程序，<br>计算机中只需要安装JRE 即可。</p>
</li>
</ol>
<p><strong>JDK、JRE 和JVM 的包含关系</strong></p>
<ol>
<li>JDK = JRE + 开发工具集（例如Javac,java 编译工具等)</li>
<li>JRE = JVM + Java SE 标准类库（java 核心类库）</li>
<li>如果只想运行开发好的.class 文件只需要JRE</li>
</ol>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/10/hello-world/</url>
    <content><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>! 这是你的第一个帖子。查看文档  <a href="https://hexo.io/docs/">documentation</a> 以获得更多信息。如果你在使用Hexo时遇到任何问题，你可以在故障排除 <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> 中找到答案，或者你可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.上问我。</p>
<p><img src="https://cdn.jsdelivr.net/gh/junmtdh/MyImages/typora/language.png"></p>
<h2 id="已知各语言的Hello-World"><a href="#已知各语言的Hello-World" class="headerlink" title="已知各语言的Hello World"></a>已知各语言的Hello World</h2><pre class="language-C" data-language="C"><code class="language-C">#include  &lt; stdio.h &gt;
int  main(int  argc, char **  argv)
&#123;
    printf(&quot;Hello World!&quot;);
    return 0;
&#125;</code></pre>

<pre class="language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;
using namespace std;
int main() &#123;
  cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; endl;
  return 0;
&#125;</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">public class HelloWorld &#123;
  static public void main(String[] args) &#123;
    System.out.println(&quot;Hello, world!&quot;);
  &#125;
&#125;</code></pre>

<pre class="language-Python" data-language="Python"><code class="language-Python">
print(&quot;Hello,World&quot;)</code></pre>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编大全解</title>
    <url>/2021/10/04/golf/</url>
    <content><![CDATA[<h2 id="8086"><a href="#8086" class="headerlink" title="8086"></a>8086</h2><pre class="language-汇编" data-language="汇编"><code class="language-汇编">
TITLE HelloWorld

DATA SEGMENT
    DispTEXT           DB  10,&#39;HelloWorld&#39;,&#39;$&#39;            
DATA ENDS

STACKS SEGMENT
    DW  80  DUP(?)      ;duplicate 80 times，prepare 80Byte for stacks
STACKS ENDS

.486
CODE    SEGMENT    USE16
        ASSUME      CS:CODE,DS:DATA,SS:STACKS
    BEG:
        ;Initialization
        MOV     AX,DATA     
        MOV     DS,AX

        ;where you can add your codes
        MOV     AH,09H
        LEA     DX,DispTEXT
        INT     21H

        ;Ending
        MOV     AX,4C00H
        INT     21H
CODE ENDS
        END BEG</code></pre>
]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2022/02/04/markdown-yu-fa/</url>
    <content><![CDATA[<h1 id="Markdown的基础语法"><a href="#Markdown的基础语法" class="headerlink" title="Markdown的基础语法"></a>Markdown的基础语法</h1><!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

<ul>
<li><a href="#markdown%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">Markdown的基础语法</a></li>
</ul>
<!-- /code_chunk_output -->


<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>在markdown语法中，标题可以使用两种标记：底线(中划线_、等号=)和#。 </p>
<ul>
<li>使用底线的语法如下。  </li>
</ul>
<blockquote>
<p>标题内容<br>=====  </p>
</blockquote>
<p>或</p>
<blockquote>
<p>标题内容<br>-—-  </p>
</blockquote>
<p><strong>说明：底线如果是等号(=)表示一级标题，底线如果是中划线(-)表示二级标题；底线符号的数量至少2个,这种底线语法只支持这两级标题。</strong>  </p>
<p>演示图如下：  </p>
<p><img src="/2022/02/04/markdown-yu-fa/biaoti.jpg" alt="标题演示图"><br><img src="/2022/02/04/markdown-yu-fa/biaoti1.jpg" alt="标题演示图"></p>
<ul>
<li>使用#的语法如下：</li>
</ul>
<blockquote>
<p>#+ 空格 + 标题内容</p>
</blockquote>
<p><strong>说明：#的个数表示了标题的等级，#后面需要加一个空格，最多支持六级标题。</strong>  </p>
<p><strong>markdown代码</strong></p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题  </span>
<span class="token title important"><span class="token punctuation">##</span> 二级标题  </span>
<span class="token title important"><span class="token punctuation">###</span> 三级标题  </span>
<span class="token title important"><span class="token punctuation">####</span> 四级标题  </span>
<span class="token title important"><span class="token punctuation">#####</span> 五级标题  </span>
<span class="token title important"><span class="token punctuation">######</span> 六级标题  </span></code></pre>

<p>演示如下：<br><img src="/2022/02/04/markdown-yu-fa/biaoti2.jpg" alt="#的语法实例演示">  </p>
<h2 id="2-段落与换行"><a href="#2-段落与换行" class="headerlink" title="2.段落与换行"></a>2.段落与换行</h2><p><strong>如果行与行之间没有空行，则会被视为同一段落；如果有空行，则会被视为不同的段落。在段落中换行，只需要在上一行的末尾插入2个及以上的空格然后按回车即可。</strong>  </p>
<p>演示结果如下：<br><strong>没有空行：</strong><br>我是第一行<br>我是第二行<br><strong>有空行：</strong><br>我是第一行</p>
<p>我是第二行<br><strong>在段落中换行：</strong><br>我是第一行，(如果想在段落中换行，在末尾插入2个或2个以上的空格然后回车即可换行)<br>我是第二行</p>
<p><span id="jump1">3.粗体与斜体</span>  </p>
<h2 id="3-粗体与斜体"><a href="#3-粗体与斜体" class="headerlink" title="3.粗体与斜体"></a>3.粗体与斜体</h2><p><em>斜体：</em> 左右各1个星号(* *)来包裹  或  左右各1个下划线(_ _)来包裹。  </p>
<p>如：<em>这一行字</em><br>如：<em>我是斜体字</em>  </p>
<p><strong>粗体：</strong> 左右各用两个星号(*<em>*</em>)包裹  或  左右各两个下划线(_<em>_</em>)包裹。  </p>
<p><em><strong>粗斜体：</strong></em> 左右各用三个星号(*** ***)包裹  或  左右各三个下划线(___ ___)包裹。  </p>
<span id="more"></span>
<h2 id="4-分隔线"><a href="#4-分隔线" class="headerlink" title="4.分隔线"></a>4.分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。  </p>
<p><strong>例如：</strong>  </p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">***  
<span class="token punctuation">---</span></span>    
<span class="token italic"><span class="token punctuation">_</span><span class="token content"> </span><span class="token punctuation">_</span></span> _   </code></pre>
<p><strong>演示结果：</strong>    </p>
<hr>
<hr>
<hr>
<h2 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5.删除线"></a>5.删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可  </p>
<p>删除线语法：<br><code>~~被删除的字符~~</code><br>如：<br><del>被删除的字符</del>  </p>
<h2 id="6-下划线"><a href="#6-下划线" class="headerlink" title="6.下划线"></a>6.下划线</h2><p>下划线可以通过 HTML 的 &lt;u&gt; 标签来实现：<br>语法：  </p>
<p><code>&lt;u&gt;我有下划线&lt;/u&gt;</code>  </p>
<p>预览：<br><u>我有下划线</u>  </p>
<h2 id="7-脚注"><a href="#7-脚注" class="headerlink" title="7.脚注"></a>7.脚注</h2><p>脚注是对文本的补充说明，用[^要注明的文字]，注意其后勿加空格。<br>语法：  </p>
<p><code>[^要注明的文字]</code>  </p>
<p>如：<br>阅读<a href="%E8%BF%99%E5%84%BF%E7%9A%84book%E8%A1%A8%E7%A4%BA%E4%B9%A6%EF%BC%81">^book</a>  </p>
<h2 id="8-Markdown列表"><a href="#8-Markdown列表" class="headerlink" title="8.Markdown列表"></a>8.Markdown列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><blockquote>
<p>星号、加号、减号 + 空格 +列表内容  </p>
</blockquote>
<p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容  </p>
<p>语法：  </p>
<blockquote>
<p>* 君不见<br>* 黄河之水天上来<br>+ hello world<br>- Hi~ o(<em>￣▽￣</em>)ブ  </p>
</blockquote>
<p>预览：  </p>
<ul>
<li>君不见</li>
<li>黄河之水天上来</li>
</ul>
<ul>
<li>hello world  </li>
</ul>
<ul>
<li>Hi~ o(<em>￣▽￣</em>)ブ  </li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><blockquote>
<p>数字+英文句号+列表内容  </p>
</blockquote>
<p>有序列表使用数字并加上 . 号来表示，如：  </p>
<ol>
<li>奔流到海</li>
<li>不复回</li>
</ol>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格(一个Tab键)即可：  </p>
<ol>
<li>第一项<ul>
<li>第一项嵌套的第一个元素 </li>
</ul>
<ul>
<li>第一项嵌套的第二个元素 </li>
</ul>
</li>
<li>第二项<ul>
<li>第二项嵌套的第一个元素 </li>
</ul>
<ul>
<li>第二项嵌套的第二个元素  </li>
</ul>
</li>
<li>第三项  <ul>
<li>列表嵌套<h2 id="9-Markdown区块"><a href="#9-Markdown区块" class="headerlink" title="9.Markdown区块"></a>9.Markdown区块</h2>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：  <blockquote>
<p>区块引用<br>第一条<br>第二条  </p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：  </p>
<blockquote>
<p>最外层  </p>
<blockquote>
<p>第一层嵌套  </p>
<blockquote>
<p>第二层嵌套  </p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a><strong>区块中使用列表</strong></h3><blockquote>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项  </li>
</ul>
</blockquote>
<h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a><strong>列表中使用区块</strong></h3><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。</p>
<p>列表中使用区块实例如下：</p>
<ul>
<li>第一项<blockquote>
<p>君不见<br>黄河之水天上来</p>
</blockquote>
</li>
<li>第二项</li>
</ul>
<h2 id="11-Markdown代码"><a href="#11-Markdown代码" class="headerlink" title="11.Markdown代码"></a>11.Markdown代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：  </p>
<p><code>printf()</code> 函数</p>
<p><strong>代码区块</strong><br>代码区块使用  4 个空格或者一个制表符（Tab 键）。</p>
<p>实例如下：</p>
<pre><code>&lt;?php
echo &#39;RUNOOB&#39;;
function test()&#123;
echo &#39;test&#39;;
&#125;
</code></pre>
<p>也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）:  </p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="12-Markdown-链接"><a href="#12-Markdown-链接" class="headerlink" title="12.Markdown 链接"></a>12.Markdown 链接</h2><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a><strong>文字链接</strong></h3><p>链接使用方法如下：</p>
<blockquote>
<p>[链接名称](链接地址)<br>或者<br>&lt;链接地址&gt;  </p>
</blockquote>
<p>方法：<br><code>[菜鸟教程](https://www.runoob.com)</code>  </p>
<p>预览结果：<br>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a>  </p>
<h3 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a><strong>网址链接</strong></h3><p>将网络地址或者邮箱地址使用<strong>尖括号</strong>包裹起来会直接转换成超链接。<br>写法：<br><code>&lt;https://www.runoob.com&gt;</code><br>预览：<br> <a href="https://www.runoob.com/">https://www.runoob.com</a>  </p>
<h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a><strong>高级链接</strong></h3><p>我们可以在正文中引用链接标记，即引用定义好的变量。  </p>
<p>在底部定义链接标记，可以理解为定义一个地址变量：  </p>
<p>语法：  </p>
<blockquote>
<p>[链接文字][链接标记]<br>[链接标记]:链接地址  </p>
</blockquote>
<p>这个链接用 1 作为网址变量 [Google][1]<br>这个链接用 run 作为网址变量 [Runoob][run]<br>然后在文档的结尾为变量赋值（网址）<br>[1]: <a href="http://www.google.com/">http://www.google.com/</a><br>[run]: <a href="http://www.runoob.com/">http://www.runoob.com/</a><br><a href="http://www.runoob.com/">http://www.runoob.com/</a></p>
<h2 id="13-转义"><a href="#13-转义" class="headerlink" title="13.转义"></a>13.转义</h2><p>如果想在markdown中插入一些标记符号，但是又不想让这些符号被渲染，就可以使用\进行转义。<br>语法：  </p>
<blockquote>
<p>\特殊符号  </p>
</blockquote>
<h2 id="14-Markdown图片"><a href="#14-Markdown图片" class="headerlink" title="14.Markdown图片"></a>14.Markdown图片</h2><p>Markdown 图片语法格式如下：</p>
<blockquote>
<p>![图片描述](图片地址)<br>![图片描述](图片地址 “可选标题”)  </p>
</blockquote>
<p>开头一个感叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。<br><img src="/2022/02/04/markdown-yu-fa/year.png" alt="alt 图片">  </p>
<h2 id="15-markdown表格"><a href="#15-markdown表格" class="headerlink" title="15.markdown表格"></a>15.markdown表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p>
<p>格式如下：<br>|  表头   | 表头  |<br>|  —-  | —-  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |</p>
<p><strong>对齐方式</strong><br>我们可以设置表格的对齐方式：</p>
<p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。<br>如下：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">以上代码显示结果如下：</td>
<td align="right"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="16-表情符号"><a href="#16-表情符号" class="headerlink" title="16.表情符号"></a>16.表情符号</h2><p>使用冒号(:)包裹表情代码即可，语法如下：  </p>
<blockquote>
<p>:表情代码:  </p>
</blockquote>
<p>例如：<br>:smile:<br>:laughing:<br>:+1:<br>:-1:<br>:airplane:<br>全部表情的cheatsheet在<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">https://www.webfx.com/tools/emoji-cheat-sheet/</a>  </p>
<h2 id="17-任务列表"><a href="#17-任务列表" class="headerlink" title="17.任务列表"></a>17.任务列表</h2><ul>
<li>任务列表的语法如下：  <blockquote>
<ul>
<li><input disabled type="checkbox"> 未勾选  </li>
<li><input checked disabled type="checkbox"> 已勾选  </li>
</ul>
</blockquote>
</li>
<li>语法说明：<br>a.任务列表以<strong>减号(-)</strong> 加 <strong>空格</strong>开头，然后加<strong>中括号[]<strong>，中括号里面由</strong>空格或x</strong>组成。<br>b.字母x可以是大写或小写，当中括号中的字符为空格时，表示未选中，为x表示选中。  </li>
</ul>
<p>代码：  </p>
<pre><code class="markdown">- [x] 去上课  
- [x] 认真学习  
- [ ] 打游戏  
</code></pre>
<p>预览：  </p>
<ul>
<li><input checked disabled type="checkbox"> 去上课  </li>
<li><input checked disabled type="checkbox"> 认真学习  </li>
<li><input disabled type="checkbox"> 打游戏  </li>
</ul>
<h2 id="18-锚点-书签"><a href="#18-锚点-书签" class="headerlink" title="18.锚点(书签)"></a>18.锚点(书签)</h2><p>用来标记文档的特定位置，使用锚点可以跳转到当前文档或其他文档中指定位置。  </p>
<ul>
<li>锚点语法：  <blockquote>
<p>[锚点描述](#锚点名)  </p>
</blockquote>
</li>
<li>语法说明：<br>中文可能有些网站不支持，锚点建议使用字母和数字，锚点名区分字母大小写，锚点名中不能有空格或其他特殊字符。  </li>
<li>添加锚点:<br><code>&lt;span id=&quot;锚点名&quot;&gt;跳转到的地方&lt;/span&gt;</code>  </li>
</ul>
<p>例如跳转到粗体与斜体：<br>代码:<br><a href="#jump1">跳转到3.粗体与斜体</a>  </p>
<p>插件：  </p>
<p><img src="/2022/02/04/markdown-yu-fa/2022-03-03-11-44-40.png">  </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>另一个不为人知的世界</title>
    <url>/2022/02/15/math/</url>
    <content><![CDATA[<table><tr><td bgcolor="#a3cf62"><b>小时候总想像着快点长大，长大以后就能有自己想要的生活，此刻我已年纪不小，可成长的走向非我所想。

<p>每个失眠的夜晚，总觉得自己一无是处，满脑是以后会怎样，当成长与想象造成的落差开始崩溃释放，生活自此成了眼中钉。</p>
<p>以前后悔的瞬间让你痛恨不如人意的种种，活着变成一种煎熬，经受现实的崎岖不平之余，还要承受人群的是非。</p>
<p>很多质疑快乐再质疑悲伤的瞬间，你似有千言万语的委屈，却因呜咽而滞留在喉咙深处，空气依旧凝固在寂静黑夜。很多想放弃自己的时刻，唯一能做的是静待恢复平静，然后再找回站起来的力量。</p>
<p>太多黑暗的夜晚，而黎明的光又是那么难见到。</p></b></td></tr></table><p></p>
<h1 align="center">通往另一个完全不一样的世界</h1>
细心的朋友会发现的ヾ(❀^ω^)ﾉﾞ
密码：

<p><mark style="background-color:#00BFFF">计算极限</mark>(结果保留6位小数)</p>
<p><font size="8">$<br>\begin{aligned}<br>  \lim_{n\to \infty}(1+ \tfrac{1}{n^2})(1+\tfrac{2}{n^2})…(1+\tfrac{n}{n^2})<br>\end{aligned}<br>$</font></p>
<p>$<br>\begin{aligned}<br>  \lim_{n\to \infty}(1+ \tfrac{1}{n^2})(1+\tfrac{2}{n^2})…(1+\tfrac{n}{n^2})<br>\end{aligned}<br>$</p>
<p><strong>然后通过’SHA256’加密</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要学C语言?</title>
    <url>/2021/07/01/wei-shi-me-yao-xue-c-yu-yan/</url>
    <content><![CDATA[<h1 id="为什么要学C语言"><a href="#为什么要学C语言" class="headerlink" title="为什么要学C语言?"></a>为什么要学C语言?</h1><h2>为什么要学C语言，这个问题就如同“又不出国，为什么要学英语”一样！学习C语言不是简单的学语言本身，而是要透过C语言去理解一些如寄存器、内存、函数调用、跳转等东西。有句话说：“C生万物，编程之本”，确实如此，C语言在计算机体系占有着难以取代的位置！对于大部分计算机专业的学生来说，C语言一定是学习编程的第一门语言，大多数高校在大一时都会开设C语言这门课程，甚至还会给很多非计算机专业的开设。
学习C语言会为你建立较好的逻辑思维能力。C语言能让你明白程序的运行原理，比如，计算机的各个部件是如何交互的，程序在内存中是一种怎样的状态，操作系统和用户程序之间有着怎样的“爱恨情仇”，这些底层知识决定了你的发展高度，也决定了你的职业生涯。学习C语言是了解内存布局的最简单、最直接、最有效的途径，C语言简直是为内存而生的，它比任何一门编程语言都贴近内存。不了解内存，就学不会进程和线程，就没有资格玩中大型项目，没有资格开发底层组件，没有资格架构一个系统，命中注定你就是一个菜鸟，成不了什么气候。
C语言既具有高级语言的特点，又具有汇编语言的特点，所以可以作为工作系统设计语言，编写系统应用程序，也可以作为应用程序设计语言，编写不依赖计算机硬件的应用程序。其应用范围极为广泛，不仅仅是在软件开发上，各类科研项目也都要用到C语言。
C语言是一门简单、底层、较早的编程语言，后来的很多语言在语法上都和C语言类似，称为“类C语言”，例如 Java、C++、C#、PHP、JavaScript 等，学完C语言再学这些语言都很容易上手。并且，C语言能够让你更加深刻的认识内存和编译原理，了解程序的每一个细节，夯实基本功，站得“低”才能望的远，所以优秀的程序员都会学习C语言。
学习C语言并不一定是要应用它，C语言可以夯实你的编程基础，尤其是数据结构、算法、内存、线程、进程、通信、操作系统等底层的计算机知识，没有C语言基础是学不好的。这些底层知识并不一定能够直接应用在实际开发中，但是它们会让你有底气，会让你透彻地理解编程概念，会让你站的“低”看得远，会让你避免很多低级错误，会让你心中有“架构师”的思维。不学C语言是码农，学了C语言是程序员。</h2>
---
C语言是一门通用性的语言，并没有针对某个领域进行优化，在实际项目中，C语言主要用于较底层的开发，例如：
> Windows、Linux、Unix 等操作系统的内核90%以上都使用C语言开发；
开发硬件驱动，让硬件和操作系统连接起来，这样用户才能使用硬件、程序员才能控制硬件；
单片机和嵌入式属于软硬件的结合，有很多使用C语言的地方；
开发系统组件或服务，用于支撑上层应用；
编写PHP扩展，增强PHP的功能；
如果对软件某个模块（例如算法和搜索部分）的效率要求较高，也可以使用C语言来开发。]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言函数</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>乐翻天</title>
    <url>/2021/04/02/jian-zhi/</url>
    <content><![CDATA[<p>04月2日星期五刚好没课，我们寝室4人去成都 “乐翻天”(相当于一个小型的游乐场)做兼职，有些幼儿园和小学的小朋友来这里玩，应该是他们学校老师组织的春游活动吧。哈哈，虽然工资不高，但包午饭（午饭还可以ღ），工作也挺轻松的，我们也可以免费玩这些项目。<br>不过那个小朋友</p>
]]></content>
      <categories>
        <category>图</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>博客的问题</title>
    <url>/2022/03/10/bo-ke-de-wen-ti/</url>
    <content><![CDATA[<p>之前把这个弄崩了，不知道哪儿的问题，还好东西都备份了的，重新上传了这些资源<br>不过还有些写的也弄不见了☹<br>还是butterfly好点，那个暂时没有公开出来，就是非常麻烦懒得去弄，唉，<br>之前图床也不行了，后来换了一个，也弄丢了些</p>
<p>加载不出来的不知道在哪儿去了</p>
<p>好久没来看了<br>算了……<br>不搞了</p>
<p>再回来<br>唉，又不会搞</p>
<p>咳</p>
<table><tr><td bgcolor="yellow"><font size="5">无聊了就再来写点吧</font></td></tr></table>]]></content>
      <categories>
        <category>program</category>
      </categories>
      <tags>
        <tag>说明</tag>
      </tags>
  </entry>
  <entry>
    <title>随拍</title>
    <url>/2021/05/10/xiao-yuan-sui-pai/</url>
    <content><![CDATA[<h1 id="校园随拍"><a href="#校园随拍" class="headerlink" title="校园随拍"></a>校园随拍</h1><p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/1.jpg" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/2.jpg" alt="2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/3.jpg" alt="3"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/4.jpg" alt="4"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/5.jpg" alt="5"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/6.jpg" alt="6"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhi7xuan/project/MyImages/wenli/7.jpg" alt="7"></p>
]]></content>
      <categories>
        <category>图</category>
      </categories>
      <tags>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解</title>
    <url>/2021/02/23/shen-ru-li-jie/</url>
    <content><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><p>would you like to receive product updates and announcements viaemail?<br>您是否希望收到产品更新和通知？</p>
<p>Type “y” for yes or “n” for no<br>输入“y”表示“是”或“n”表示“否”。</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
